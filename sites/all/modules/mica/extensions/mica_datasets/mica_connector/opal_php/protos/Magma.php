<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Magma.proto
//   Date: 2013-04-22 20:55:40

namespace Magma {

  class DatasourceUnitConfigDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $unit = null;
    
    /**  @var boolean */
    public $allowIdentifierGeneration = false;
    
    /**  @var boolean */
    public $ignoreUnknownIdentifier = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.DatasourceUnitConfigDto');

      // OPTIONAL STRING unit = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "unit";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL allowIdentifierGeneration = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "allowIdentifierGeneration";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL ignoreUnknownIdentifier = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ignoreUnknownIdentifier";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <unit> has a value
     *
     * @return boolean
     */
    public function hasUnit(){
      return $this->_has(1);
    }
    
    /**
     * Clear <unit> value
     *
     * @return \Magma\DatasourceUnitConfigDto
     */
    public function clearUnit(){
      return $this->_clear(1);
    }
    
    /**
     * Get <unit> value
     *
     * @return string
     */
    public function getUnit(){
      return $this->_get(1);
    }
    
    /**
     * Set <unit> value
     *
     * @param string $value
     * @return \Magma\DatasourceUnitConfigDto
     */
    public function setUnit( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <allowIdentifierGeneration> has a value
     *
     * @return boolean
     */
    public function hasAllowIdentifierGeneration(){
      return $this->_has(2);
    }
    
    /**
     * Clear <allowIdentifierGeneration> value
     *
     * @return \Magma\DatasourceUnitConfigDto
     */
    public function clearAllowIdentifierGeneration(){
      return $this->_clear(2);
    }
    
    /**
     * Get <allowIdentifierGeneration> value
     *
     * @return boolean
     */
    public function getAllowIdentifierGeneration(){
      return $this->_get(2);
    }
    
    /**
     * Set <allowIdentifierGeneration> value
     *
     * @param boolean $value
     * @return \Magma\DatasourceUnitConfigDto
     */
    public function setAllowIdentifierGeneration( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ignoreUnknownIdentifier> has a value
     *
     * @return boolean
     */
    public function hasIgnoreUnknownIdentifier(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ignoreUnknownIdentifier> value
     *
     * @return \Magma\DatasourceUnitConfigDto
     */
    public function clearIgnoreUnknownIdentifier(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ignoreUnknownIdentifier> value
     *
     * @return boolean
     */
    public function getIgnoreUnknownIdentifier(){
      return $this->_get(3);
    }
    
    /**
     * Set <ignoreUnknownIdentifier> value
     *
     * @param boolean $value
     * @return \Magma\DatasourceUnitConfigDto
     */
    public function setIgnoreUnknownIdentifier( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Magma {

  class DatasourceIncrementalConfigDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $incremental = false;
    
    /**  @var string */
    public $incrementalDestinationName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.DatasourceIncrementalConfigDto');

      // OPTIONAL BOOL incremental = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "incremental";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL STRING incrementalDestinationName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "incrementalDestinationName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <incremental> has a value
     *
     * @return boolean
     */
    public function hasIncremental(){
      return $this->_has(1);
    }
    
    /**
     * Clear <incremental> value
     *
     * @return \Magma\DatasourceIncrementalConfigDto
     */
    public function clearIncremental(){
      return $this->_clear(1);
    }
    
    /**
     * Get <incremental> value
     *
     * @return boolean
     */
    public function getIncremental(){
      return $this->_get(1);
    }
    
    /**
     * Set <incremental> value
     *
     * @param boolean $value
     * @return \Magma\DatasourceIncrementalConfigDto
     */
    public function setIncremental( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <incrementalDestinationName> has a value
     *
     * @return boolean
     */
    public function hasIncrementalDestinationName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <incrementalDestinationName> value
     *
     * @return \Magma\DatasourceIncrementalConfigDto
     */
    public function clearIncrementalDestinationName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <incrementalDestinationName> value
     *
     * @return string
     */
    public function getIncrementalDestinationName(){
      return $this->_get(2);
    }
    
    /**
     * Set <incrementalDestinationName> value
     *
     * @param string $value
     * @return \Magma\DatasourceIncrementalConfigDto
     */
    public function setIncrementalDestinationName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class DatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \Magma\DatasourceIncrementalConfigDto */
    public $incrementalConfig = null;
    
    /**  @var \Magma\DatasourceUnitConfigDto */
    public $unitConfig = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.DatasourceFactoryDto');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE incrementalConfig = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "incrementalConfig";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Magma\DatasourceIncrementalConfigDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unitConfig = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "unitConfig";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Magma\DatasourceUnitConfigDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Magma\DatasourceFactoryDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Magma\DatasourceFactoryDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <incrementalConfig> has a value
     *
     * @return boolean
     */
    public function hasIncrementalConfig(){
      return $this->_has(2);
    }
    
    /**
     * Clear <incrementalConfig> value
     *
     * @return \Magma\DatasourceFactoryDto
     */
    public function clearIncrementalConfig(){
      return $this->_clear(2);
    }
    
    /**
     * Get <incrementalConfig> value
     *
     * @return \Magma\DatasourceIncrementalConfigDto
     */
    public function getIncrementalConfig(){
      return $this->_get(2);
    }
    
    /**
     * Set <incrementalConfig> value
     *
     * @param \Magma\DatasourceIncrementalConfigDto $value
     * @return \Magma\DatasourceFactoryDto
     */
    public function setIncrementalConfig(\Magma\DatasourceIncrementalConfigDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unitConfig> has a value
     *
     * @return boolean
     */
    public function hasUnitConfig(){
      return $this->_has(3);
    }
    
    /**
     * Clear <unitConfig> value
     *
     * @return \Magma\DatasourceFactoryDto
     */
    public function clearUnitConfig(){
      return $this->_clear(3);
    }
    
    /**
     * Get <unitConfig> value
     *
     * @return \Magma\DatasourceUnitConfigDto
     */
    public function getUnitConfig(){
      return $this->_get(3);
    }
    
    /**
     * Set <unitConfig> value
     *
     * @param \Magma\DatasourceUnitConfigDto $value
     * @return \Magma\DatasourceFactoryDto
     */
    public function setUnitConfig(\Magma\DatasourceUnitConfigDto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Magma {

  class ExcelDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $file = null;
    
    /**  @var boolean */
    public $readOnly = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.ExcelDatasourceFactoryDto');

      // REQUIRED STRING file = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "file";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BOOL readOnly = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "readOnly";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <file> has a value
     *
     * @return boolean
     */
    public function hasFile(){
      return $this->_has(1);
    }
    
    /**
     * Clear <file> value
     *
     * @return \Magma\ExcelDatasourceFactoryDto
     */
    public function clearFile(){
      return $this->_clear(1);
    }
    
    /**
     * Get <file> value
     *
     * @return string
     */
    public function getFile(){
      return $this->_get(1);
    }
    
    /**
     * Set <file> value
     *
     * @param string $value
     * @return \Magma\ExcelDatasourceFactoryDto
     */
    public function setFile( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <readOnly> has a value
     *
     * @return boolean
     */
    public function hasReadOnly(){
      return $this->_has(2);
    }
    
    /**
     * Clear <readOnly> value
     *
     * @return \Magma\ExcelDatasourceFactoryDto
     */
    public function clearReadOnly(){
      return $this->_clear(2);
    }
    
    /**
     * Get <readOnly> value
     *
     * @return boolean
     */
    public function getReadOnly(){
      return $this->_get(2);
    }
    
    /**
     * Set <readOnly> value
     *
     * @param boolean $value
     * @return \Magma\ExcelDatasourceFactoryDto
     */
    public function setReadOnly( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class CsvDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bundle = null;
    
    /**  @var \Magma\CsvDatasourceTableBundleDto[]  */
    public $tables = array();
    
    /**  @var string */
    public $characterSet = null;
    
    /**  @var string */
    public $separator = null;
    
    /**  @var string */
    public $quote = null;
    
    /**  @var int */
    public $firstRow = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.CsvDatasourceFactoryDto');

      // OPTIONAL STRING bundle = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bundle";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE tables = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "tables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\CsvDatasourceTableBundleDto';
      $descriptor->addField($f);

      // OPTIONAL STRING characterSet = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "characterSet";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING separator = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "separator";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING quote = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "quote";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 firstRow = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "firstRow";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bundle> has a value
     *
     * @return boolean
     */
    public function hasBundle(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bundle> value
     *
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function clearBundle(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bundle> value
     *
     * @return string
     */
    public function getBundle(){
      return $this->_get(1);
    }
    
    /**
     * Set <bundle> value
     *
     * @param string $value
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function setBundle( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tables> has a value
     *
     * @return boolean
     */
    public function hasTables(){
      return $this->_has(2);
    }
    
    /**
     * Clear <tables> value
     *
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function clearTables(){
      return $this->_clear(2);
    }
    
    /**
     * Get <tables> value
     *
     * @param int $idx
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function getTables($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <tables> value
     *
     * @param \Magma\CsvDatasourceTableBundleDto $value
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function setTables(\Magma\CsvDatasourceTableBundleDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <tables>
     *
     * @return \Magma\CsvDatasourceTableBundleDto[]
     */
    public function getTablesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <tables>
     *
     * @param \Magma\CsvDatasourceTableBundleDto $value
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function addTables(\Magma\CsvDatasourceTableBundleDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <characterSet> has a value
     *
     * @return boolean
     */
    public function hasCharacterSet(){
      return $this->_has(3);
    }
    
    /**
     * Clear <characterSet> value
     *
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function clearCharacterSet(){
      return $this->_clear(3);
    }
    
    /**
     * Get <characterSet> value
     *
     * @return string
     */
    public function getCharacterSet(){
      return $this->_get(3);
    }
    
    /**
     * Set <characterSet> value
     *
     * @param string $value
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function setCharacterSet( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <separator> has a value
     *
     * @return boolean
     */
    public function hasSeparator(){
      return $this->_has(4);
    }
    
    /**
     * Clear <separator> value
     *
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function clearSeparator(){
      return $this->_clear(4);
    }
    
    /**
     * Get <separator> value
     *
     * @return string
     */
    public function getSeparator(){
      return $this->_get(4);
    }
    
    /**
     * Set <separator> value
     *
     * @param string $value
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function setSeparator( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <quote> has a value
     *
     * @return boolean
     */
    public function hasQuote(){
      return $this->_has(5);
    }
    
    /**
     * Clear <quote> value
     *
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function clearQuote(){
      return $this->_clear(5);
    }
    
    /**
     * Get <quote> value
     *
     * @return string
     */
    public function getQuote(){
      return $this->_get(5);
    }
    
    /**
     * Set <quote> value
     *
     * @param string $value
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function setQuote( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <firstRow> has a value
     *
     * @return boolean
     */
    public function hasFirstRow(){
      return $this->_has(6);
    }
    
    /**
     * Clear <firstRow> value
     *
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function clearFirstRow(){
      return $this->_clear(6);
    }
    
    /**
     * Get <firstRow> value
     *
     * @return int
     */
    public function getFirstRow(){
      return $this->_get(6);
    }
    
    /**
     * Set <firstRow> value
     *
     * @param int $value
     * @return \Magma\CsvDatasourceFactoryDto
     */
    public function setFirstRow( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace Magma {

  class CsvDatasourceTableBundleDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $variables = null;
    
    /**  @var string */
    public $data = null;
    
    /**  @var string */
    public $refTable = null;
    
    /**  @var string */
    public $entityType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.CsvDatasourceTableBundleDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING variables = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "variables";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING data = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING refTable = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "refTable";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING entityType = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "entityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <variables> has a value
     *
     * @return boolean
     */
    public function hasVariables(){
      return $this->_has(2);
    }
    
    /**
     * Clear <variables> value
     *
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function clearVariables(){
      return $this->_clear(2);
    }
    
    /**
     * Get <variables> value
     *
     * @return string
     */
    public function getVariables(){
      return $this->_get(2);
    }
    
    /**
     * Set <variables> value
     *
     * @param string $value
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function setVariables( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <data> value
     *
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function clearData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(3);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function setData( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <refTable> has a value
     *
     * @return boolean
     */
    public function hasRefTable(){
      return $this->_has(4);
    }
    
    /**
     * Clear <refTable> value
     *
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function clearRefTable(){
      return $this->_clear(4);
    }
    
    /**
     * Get <refTable> value
     *
     * @return string
     */
    public function getRefTable(){
      return $this->_get(4);
    }
    
    /**
     * Set <refTable> value
     *
     * @param string $value
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function setRefTable( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <entityType> has a value
     *
     * @return boolean
     */
    public function hasEntityType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <entityType> value
     *
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function clearEntityType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <entityType> value
     *
     * @return string
     */
    public function getEntityType(){
      return $this->_get(5);
    }
    
    /**
     * Set <entityType> value
     *
     * @param string $value
     * @return \Magma\CsvDatasourceTableBundleDto
     */
    public function setEntityType( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace Magma {

  class FsDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $file = null;
    
    /**  @var boolean */
    public $onyxWrapper = true;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.FsDatasourceFactoryDto');

      // REQUIRED STRING file = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "file";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BOOL onyxWrapper = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "onyxWrapper";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = true;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <file> has a value
     *
     * @return boolean
     */
    public function hasFile(){
      return $this->_has(1);
    }
    
    /**
     * Clear <file> value
     *
     * @return \Magma\FsDatasourceFactoryDto
     */
    public function clearFile(){
      return $this->_clear(1);
    }
    
    /**
     * Get <file> value
     *
     * @return string
     */
    public function getFile(){
      return $this->_get(1);
    }
    
    /**
     * Set <file> value
     *
     * @param string $value
     * @return \Magma\FsDatasourceFactoryDto
     */
    public function setFile( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <onyxWrapper> has a value
     *
     * @return boolean
     */
    public function hasOnyxWrapper(){
      return $this->_has(3);
    }
    
    /**
     * Clear <onyxWrapper> value
     *
     * @return \Magma\FsDatasourceFactoryDto
     */
    public function clearOnyxWrapper(){
      return $this->_clear(3);
    }
    
    /**
     * Get <onyxWrapper> value
     *
     * @return boolean
     */
    public function getOnyxWrapper(){
      return $this->_get(3);
    }
    
    /**
     * Set <onyxWrapper> value
     *
     * @param boolean $value
     * @return \Magma\FsDatasourceFactoryDto
     */
    public function setOnyxWrapper( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Magma {

  class JdbcDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $database = null;
    
    /**  @var \Magma\JdbcDatasourceSettingsDto */
    public $settings = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.JdbcDatasourceFactoryDto');

      // REQUIRED STRING database = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE settings = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "settings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Magma\JdbcDatasourceSettingsDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <database> value
     *
     * @return \Magma\JdbcDatasourceFactoryDto
     */
    public function clearDatabase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(1);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \Magma\JdbcDatasourceFactoryDto
     */
    public function setDatabase( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <settings> has a value
     *
     * @return boolean
     */
    public function hasSettings(){
      return $this->_has(2);
    }
    
    /**
     * Clear <settings> value
     *
     * @return \Magma\JdbcDatasourceFactoryDto
     */
    public function clearSettings(){
      return $this->_clear(2);
    }
    
    /**
     * Get <settings> value
     *
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function getSettings(){
      return $this->_get(2);
    }
    
    /**
     * Set <settings> value
     *
     * @param \Magma\JdbcDatasourceSettingsDto $value
     * @return \Magma\JdbcDatasourceFactoryDto
     */
    public function setSettings(\Magma\JdbcDatasourceSettingsDto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class JdbcDatasourceSettingsDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $defaultEntityType = null;
    
    /**  @var boolean */
    public $useMetadataTables = null;
    
    /**  @var string[]  */
    public $mappedTables = array();
    
    /**  @var \Magma\JdbcValueTableSettingsDto[]  */
    public $tableSettings = array();
    
    /**  @var string */
    public $defaultCreatedTimestampColumnName = null;
    
    /**  @var string */
    public $defaultUpdatedTimestampColumnName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.JdbcDatasourceSettingsDto');

      // REQUIRED STRING defaultEntityType = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "defaultEntityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL useMetadataTables = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "useMetadataTables";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING mappedTables = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mappedTables";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE tableSettings = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "tableSettings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\JdbcValueTableSettingsDto';
      $descriptor->addField($f);

      // OPTIONAL STRING defaultCreatedTimestampColumnName = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "defaultCreatedTimestampColumnName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING defaultUpdatedTimestampColumnName = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "defaultUpdatedTimestampColumnName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <defaultEntityType> has a value
     *
     * @return boolean
     */
    public function hasDefaultEntityType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <defaultEntityType> value
     *
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function clearDefaultEntityType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <defaultEntityType> value
     *
     * @return string
     */
    public function getDefaultEntityType(){
      return $this->_get(1);
    }
    
    /**
     * Set <defaultEntityType> value
     *
     * @param string $value
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function setDefaultEntityType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <useMetadataTables> has a value
     *
     * @return boolean
     */
    public function hasUseMetadataTables(){
      return $this->_has(2);
    }
    
    /**
     * Clear <useMetadataTables> value
     *
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function clearUseMetadataTables(){
      return $this->_clear(2);
    }
    
    /**
     * Get <useMetadataTables> value
     *
     * @return boolean
     */
    public function getUseMetadataTables(){
      return $this->_get(2);
    }
    
    /**
     * Set <useMetadataTables> value
     *
     * @param boolean $value
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function setUseMetadataTables( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mappedTables> has a value
     *
     * @return boolean
     */
    public function hasMappedTables(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mappedTables> value
     *
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function clearMappedTables(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mappedTables> value
     *
     * @param int $idx
     * @return string
     */
    public function getMappedTables($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <mappedTables> value
     *
     * @param string $value
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function setMappedTables( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <mappedTables>
     *
     * @return string[]
     */
    public function getMappedTablesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <mappedTables>
     *
     * @param string $value
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function addMappedTables( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <tableSettings> has a value
     *
     * @return boolean
     */
    public function hasTableSettings(){
      return $this->_has(4);
    }
    
    /**
     * Clear <tableSettings> value
     *
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function clearTableSettings(){
      return $this->_clear(4);
    }
    
    /**
     * Get <tableSettings> value
     *
     * @param int $idx
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function getTableSettings($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <tableSettings> value
     *
     * @param \Magma\JdbcValueTableSettingsDto $value
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function setTableSettings(\Magma\JdbcValueTableSettingsDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <tableSettings>
     *
     * @return \Magma\JdbcValueTableSettingsDto[]
     */
    public function getTableSettingsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <tableSettings>
     *
     * @param \Magma\JdbcValueTableSettingsDto $value
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function addTableSettings(\Magma\JdbcValueTableSettingsDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <defaultCreatedTimestampColumnName> has a value
     *
     * @return boolean
     */
    public function hasDefaultCreatedTimestampColumnName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <defaultCreatedTimestampColumnName> value
     *
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function clearDefaultCreatedTimestampColumnName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <defaultCreatedTimestampColumnName> value
     *
     * @return string
     */
    public function getDefaultCreatedTimestampColumnName(){
      return $this->_get(5);
    }
    
    /**
     * Set <defaultCreatedTimestampColumnName> value
     *
     * @param string $value
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function setDefaultCreatedTimestampColumnName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <defaultUpdatedTimestampColumnName> has a value
     *
     * @return boolean
     */
    public function hasDefaultUpdatedTimestampColumnName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <defaultUpdatedTimestampColumnName> value
     *
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function clearDefaultUpdatedTimestampColumnName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <defaultUpdatedTimestampColumnName> value
     *
     * @return string
     */
    public function getDefaultUpdatedTimestampColumnName(){
      return $this->_get(6);
    }
    
    /**
     * Set <defaultUpdatedTimestampColumnName> value
     *
     * @param string $value
     * @return \Magma\JdbcDatasourceSettingsDto
     */
    public function setDefaultUpdatedTimestampColumnName( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace Magma {

  class JdbcValueTableSettingsDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sqlTableName = null;
    
    /**  @var string */
    public $magmaTableName = null;
    
    /**  @var string */
    public $entityType = null;
    
    /**  @var string[]  */
    public $entityIdentifierColumns = array();
    
    /**  @var string */
    public $createdTimestampColumnName = null;
    
    /**  @var string */
    public $updatedTimestampColumnName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.JdbcValueTableSettingsDto');

      // REQUIRED STRING sqlTableName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sqlTableName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING magmaTableName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "magmaTableName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING entityType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "entityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING entityIdentifierColumns = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "entityIdentifierColumns";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING createdTimestampColumnName = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "createdTimestampColumnName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING updatedTimestampColumnName = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "updatedTimestampColumnName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sqlTableName> has a value
     *
     * @return boolean
     */
    public function hasSqlTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sqlTableName> value
     *
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function clearSqlTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sqlTableName> value
     *
     * @return string
     */
    public function getSqlTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <sqlTableName> value
     *
     * @param string $value
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function setSqlTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <magmaTableName> has a value
     *
     * @return boolean
     */
    public function hasMagmaTableName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <magmaTableName> value
     *
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function clearMagmaTableName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <magmaTableName> value
     *
     * @return string
     */
    public function getMagmaTableName(){
      return $this->_get(2);
    }
    
    /**
     * Set <magmaTableName> value
     *
     * @param string $value
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function setMagmaTableName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <entityType> has a value
     *
     * @return boolean
     */
    public function hasEntityType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <entityType> value
     *
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function clearEntityType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <entityType> value
     *
     * @return string
     */
    public function getEntityType(){
      return $this->_get(3);
    }
    
    /**
     * Set <entityType> value
     *
     * @param string $value
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function setEntityType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <entityIdentifierColumns> has a value
     *
     * @return boolean
     */
    public function hasEntityIdentifierColumns(){
      return $this->_has(4);
    }
    
    /**
     * Clear <entityIdentifierColumns> value
     *
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function clearEntityIdentifierColumns(){
      return $this->_clear(4);
    }
    
    /**
     * Get <entityIdentifierColumns> value
     *
     * @param int $idx
     * @return string
     */
    public function getEntityIdentifierColumns($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <entityIdentifierColumns> value
     *
     * @param string $value
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function setEntityIdentifierColumns( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <entityIdentifierColumns>
     *
     * @return string[]
     */
    public function getEntityIdentifierColumnsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <entityIdentifierColumns>
     *
     * @param string $value
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function addEntityIdentifierColumns( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <createdTimestampColumnName> has a value
     *
     * @return boolean
     */
    public function hasCreatedTimestampColumnName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <createdTimestampColumnName> value
     *
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function clearCreatedTimestampColumnName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <createdTimestampColumnName> value
     *
     * @return string
     */
    public function getCreatedTimestampColumnName(){
      return $this->_get(5);
    }
    
    /**
     * Set <createdTimestampColumnName> value
     *
     * @param string $value
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function setCreatedTimestampColumnName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <updatedTimestampColumnName> has a value
     *
     * @return boolean
     */
    public function hasUpdatedTimestampColumnName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <updatedTimestampColumnName> value
     *
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function clearUpdatedTimestampColumnName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <updatedTimestampColumnName> value
     *
     * @return string
     */
    public function getUpdatedTimestampColumnName(){
      return $this->_get(6);
    }
    
    /**
     * Set <updatedTimestampColumnName> value
     *
     * @param string $value
     * @return \Magma\JdbcValueTableSettingsDto
     */
    public function setUpdatedTimestampColumnName( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace Magma {

  class HibernateDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $key = null;
    
    /**  @var string */
    public $database = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.HibernateDatasourceFactoryDto');

      // OPTIONAL BOOL key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING database = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Magma\HibernateDatasourceFactoryDto
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return boolean
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param boolean $value
     * @return \Magma\HibernateDatasourceFactoryDto
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(2);
    }
    
    /**
     * Clear <database> value
     *
     * @return \Magma\HibernateDatasourceFactoryDto
     */
    public function clearDatabase(){
      return $this->_clear(2);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(2);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \Magma\HibernateDatasourceFactoryDto
     */
    public function setDatabase( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class LimesurveyDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $key = null;
    
    /**  @var string */
    public $database = null;
    
    /**  @var string */
    public $tablePrefix = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.LimesurveyDatasourceFactoryDto');

      // OPTIONAL BOOL key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING database = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING tablePrefix = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tablePrefix";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Magma\LimesurveyDatasourceFactoryDto
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return boolean
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param boolean $value
     * @return \Magma\LimesurveyDatasourceFactoryDto
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(2);
    }
    
    /**
     * Clear <database> value
     *
     * @return \Magma\LimesurveyDatasourceFactoryDto
     */
    public function clearDatabase(){
      return $this->_clear(2);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(2);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \Magma\LimesurveyDatasourceFactoryDto
     */
    public function setDatabase( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tablePrefix> has a value
     *
     * @return boolean
     */
    public function hasTablePrefix(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tablePrefix> value
     *
     * @return \Magma\LimesurveyDatasourceFactoryDto
     */
    public function clearTablePrefix(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tablePrefix> value
     *
     * @return string
     */
    public function getTablePrefix(){
      return $this->_get(3);
    }
    
    /**
     * Set <tablePrefix> value
     *
     * @param string $value
     * @return \Magma\LimesurveyDatasourceFactoryDto
     */
    public function setTablePrefix( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Magma {

  class StaticDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var \Magma\TableDto[]  */
    public $tables = array();
    
    /**  @var \Magma\ViewDto[]  */
    public $views = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.StaticDatasourceFactoryDto');

      // REPEATED MESSAGE tables = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\TableDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE views = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "views";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\ViewDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tables> has a value
     *
     * @return boolean
     */
    public function hasTables(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tables> value
     *
     * @return \Magma\StaticDatasourceFactoryDto
     */
    public function clearTables(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tables> value
     *
     * @param int $idx
     * @return \Magma\TableDto
     */
    public function getTables($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <tables> value
     *
     * @param \Magma\TableDto $value
     * @return \Magma\StaticDatasourceFactoryDto
     */
    public function setTables(\Magma\TableDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <tables>
     *
     * @return \Magma\TableDto[]
     */
    public function getTablesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <tables>
     *
     * @param \Magma\TableDto $value
     * @return \Magma\StaticDatasourceFactoryDto
     */
    public function addTables(\Magma\TableDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <views> has a value
     *
     * @return boolean
     */
    public function hasViews(){
      return $this->_has(2);
    }
    
    /**
     * Clear <views> value
     *
     * @return \Magma\StaticDatasourceFactoryDto
     */
    public function clearViews(){
      return $this->_clear(2);
    }
    
    /**
     * Get <views> value
     *
     * @param int $idx
     * @return \Magma\ViewDto
     */
    public function getViews($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <views> value
     *
     * @param \Magma\ViewDto $value
     * @return \Magma\StaticDatasourceFactoryDto
     */
    public function setViews(\Magma\ViewDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <views>
     *
     * @return \Magma\ViewDto[]
     */
    public function getViewsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <views>
     *
     * @param \Magma\ViewDto $value
     * @return \Magma\StaticDatasourceFactoryDto
     */
    public function addViews(\Magma\ViewDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace Magma {

  class RestDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $url = null;
    
    /**  @var string */
    public $username = null;
    
    /**  @var string */
    public $password = null;
    
    /**  @var string */
    public $remoteDatasource = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.RestDatasourceFactoryDto');

      // REQUIRED STRING url = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING username = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING password = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "password";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING remoteDatasource = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "remoteDatasource";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <url> value
     *
     * @return \Magma\RestDatasourceFactoryDto
     */
    public function clearUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \Magma\RestDatasourceFactoryDto
     */
    public function setUrl( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(2);
    }
    
    /**
     * Clear <username> value
     *
     * @return \Magma\RestDatasourceFactoryDto
     */
    public function clearUsername(){
      return $this->_clear(2);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(2);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \Magma\RestDatasourceFactoryDto
     */
    public function setUsername( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <password> has a value
     *
     * @return boolean
     */
    public function hasPassword(){
      return $this->_has(3);
    }
    
    /**
     * Clear <password> value
     *
     * @return \Magma\RestDatasourceFactoryDto
     */
    public function clearPassword(){
      return $this->_clear(3);
    }
    
    /**
     * Get <password> value
     *
     * @return string
     */
    public function getPassword(){
      return $this->_get(3);
    }
    
    /**
     * Set <password> value
     *
     * @param string $value
     * @return \Magma\RestDatasourceFactoryDto
     */
    public function setPassword( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <remoteDatasource> has a value
     *
     * @return boolean
     */
    public function hasRemoteDatasource(){
      return $this->_has(4);
    }
    
    /**
     * Clear <remoteDatasource> value
     *
     * @return \Magma\RestDatasourceFactoryDto
     */
    public function clearRemoteDatasource(){
      return $this->_clear(4);
    }
    
    /**
     * Get <remoteDatasource> value
     *
     * @return string
     */
    public function getRemoteDatasource(){
      return $this->_get(4);
    }
    
    /**
     * Set <remoteDatasource> value
     *
     * @param string $value
     * @return \Magma\RestDatasourceFactoryDto
     */
    public function setRemoteDatasource( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace Magma {

  class IncrementalDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var \Magma\DatasourceFactoryDto */
    public $datasourceFactoryDto = null;
    
    /**  @var boolean */
    public $isIncremental = true;
    
    /**  @var \Magma\TableDto */
    public $destinationTable = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.IncrementalDatasourceFactoryDto');

      // REQUIRED MESSAGE datasourceFactoryDto = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "datasourceFactoryDto";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Magma\DatasourceFactoryDto';
      $descriptor->addField($f);

      // REQUIRED BOOL isIncremental = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "isIncremental";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = true;
      $descriptor->addField($f);

      // REQUIRED MESSAGE destinationTable = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "destinationTable";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Magma\TableDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <datasourceFactoryDto> has a value
     *
     * @return boolean
     */
    public function hasDatasourceFactoryDto(){
      return $this->_has(1);
    }
    
    /**
     * Clear <datasourceFactoryDto> value
     *
     * @return \Magma\IncrementalDatasourceFactoryDto
     */
    public function clearDatasourceFactoryDto(){
      return $this->_clear(1);
    }
    
    /**
     * Get <datasourceFactoryDto> value
     *
     * @return \Magma\DatasourceFactoryDto
     */
    public function getDatasourceFactoryDto(){
      return $this->_get(1);
    }
    
    /**
     * Set <datasourceFactoryDto> value
     *
     * @param \Magma\DatasourceFactoryDto $value
     * @return \Magma\IncrementalDatasourceFactoryDto
     */
    public function setDatasourceFactoryDto(\Magma\DatasourceFactoryDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <isIncremental> has a value
     *
     * @return boolean
     */
    public function hasIsIncremental(){
      return $this->_has(2);
    }
    
    /**
     * Clear <isIncremental> value
     *
     * @return \Magma\IncrementalDatasourceFactoryDto
     */
    public function clearIsIncremental(){
      return $this->_clear(2);
    }
    
    /**
     * Get <isIncremental> value
     *
     * @return boolean
     */
    public function getIsIncremental(){
      return $this->_get(2);
    }
    
    /**
     * Set <isIncremental> value
     *
     * @param boolean $value
     * @return \Magma\IncrementalDatasourceFactoryDto
     */
    public function setIsIncremental( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <destinationTable> has a value
     *
     * @return boolean
     */
    public function hasDestinationTable(){
      return $this->_has(3);
    }
    
    /**
     * Clear <destinationTable> value
     *
     * @return \Magma\IncrementalDatasourceFactoryDto
     */
    public function clearDestinationTable(){
      return $this->_clear(3);
    }
    
    /**
     * Get <destinationTable> value
     *
     * @return \Magma\TableDto
     */
    public function getDestinationTable(){
      return $this->_get(3);
    }
    
    /**
     * Set <destinationTable> value
     *
     * @param \Magma\TableDto $value
     * @return \Magma\IncrementalDatasourceFactoryDto
     */
    public function setDestinationTable(\Magma\TableDto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Magma {

  class SpssDatasourceFactoryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $file = null;
    
    /**  @var string */
    public $characterSet = null;
    
    /**  @var string */
    public $entityType = null;
    
    /**  @var string */
    public $locale = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.SpssDatasourceFactoryDto');

      // REQUIRED STRING file = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "file";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING characterSet = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "characterSet";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING entityType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "entityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING locale = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "locale";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <file> has a value
     *
     * @return boolean
     */
    public function hasFile(){
      return $this->_has(1);
    }
    
    /**
     * Clear <file> value
     *
     * @return \Magma\SpssDatasourceFactoryDto
     */
    public function clearFile(){
      return $this->_clear(1);
    }
    
    /**
     * Get <file> value
     *
     * @return string
     */
    public function getFile(){
      return $this->_get(1);
    }
    
    /**
     * Set <file> value
     *
     * @param string $value
     * @return \Magma\SpssDatasourceFactoryDto
     */
    public function setFile( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <characterSet> has a value
     *
     * @return boolean
     */
    public function hasCharacterSet(){
      return $this->_has(2);
    }
    
    /**
     * Clear <characterSet> value
     *
     * @return \Magma\SpssDatasourceFactoryDto
     */
    public function clearCharacterSet(){
      return $this->_clear(2);
    }
    
    /**
     * Get <characterSet> value
     *
     * @return string
     */
    public function getCharacterSet(){
      return $this->_get(2);
    }
    
    /**
     * Set <characterSet> value
     *
     * @param string $value
     * @return \Magma\SpssDatasourceFactoryDto
     */
    public function setCharacterSet( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <entityType> has a value
     *
     * @return boolean
     */
    public function hasEntityType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <entityType> value
     *
     * @return \Magma\SpssDatasourceFactoryDto
     */
    public function clearEntityType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <entityType> value
     *
     * @return string
     */
    public function getEntityType(){
      return $this->_get(3);
    }
    
    /**
     * Set <entityType> value
     *
     * @param string $value
     * @return \Magma\SpssDatasourceFactoryDto
     */
    public function setEntityType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <locale> has a value
     *
     * @return boolean
     */
    public function hasLocale(){
      return $this->_has(4);
    }
    
    /**
     * Clear <locale> value
     *
     * @return \Magma\SpssDatasourceFactoryDto
     */
    public function clearLocale(){
      return $this->_clear(4);
    }
    
    /**
     * Get <locale> value
     *
     * @return string
     */
    public function getLocale(){
      return $this->_get(4);
    }
    
    /**
     * Set <locale> value
     *
     * @param string $value
     * @return \Magma\SpssDatasourceFactoryDto
     */
    public function setLocale( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace Magma {

  class DatasourceParsingErrorDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $defaultMessage = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var string[]  */
    public $arguments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.DatasourceParsingErrorDto');

      // REQUIRED STRING defaultMessage = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "defaultMessage";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING arguments = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "arguments";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <defaultMessage> has a value
     *
     * @return boolean
     */
    public function hasDefaultMessage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <defaultMessage> value
     *
     * @return \Magma\DatasourceParsingErrorDto
     */
    public function clearDefaultMessage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <defaultMessage> value
     *
     * @return string
     */
    public function getDefaultMessage(){
      return $this->_get(1);
    }
    
    /**
     * Set <defaultMessage> value
     *
     * @param string $value
     * @return \Magma\DatasourceParsingErrorDto
     */
    public function setDefaultMessage( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Magma\DatasourceParsingErrorDto
     */
    public function clearKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Magma\DatasourceParsingErrorDto
     */
    public function setKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <arguments> has a value
     *
     * @return boolean
     */
    public function hasArguments(){
      return $this->_has(3);
    }
    
    /**
     * Clear <arguments> value
     *
     * @return \Magma\DatasourceParsingErrorDto
     */
    public function clearArguments(){
      return $this->_clear(3);
    }
    
    /**
     * Get <arguments> value
     *
     * @param int $idx
     * @return string
     */
    public function getArguments($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <arguments> value
     *
     * @param string $value
     * @return \Magma\DatasourceParsingErrorDto
     */
    public function setArguments( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <arguments>
     *
     * @return string[]
     */
    public function getArgumentsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <arguments>
     *
     * @param string $value
     * @return \Magma\DatasourceParsingErrorDto
     */
    public function addArguments( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Magma {

  class DatasourceDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var string[]  */
    public $table = array();
    
    /**  @var string[]  */
    public $view = array();
    
    /**  @var string */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.DatasourceDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING table = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING view = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "view";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED STRING type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Magma\DatasourceDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Magma\DatasourceDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(2);
    }
    
    /**
     * Clear <link> value
     *
     * @return \Magma\DatasourceDto
     */
    public function clearLink(){
      return $this->_clear(2);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(2);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Magma\DatasourceDto
     */
    public function setLink( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable(){
      return $this->_has(3);
    }
    
    /**
     * Clear <table> value
     *
     * @return \Magma\DatasourceDto
     */
    public function clearTable(){
      return $this->_clear(3);
    }
    
    /**
     * Get <table> value
     *
     * @param int $idx
     * @return string
     */
    public function getTable($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <table> value
     *
     * @param string $value
     * @return \Magma\DatasourceDto
     */
    public function setTable( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <table>
     *
     * @return string[]
     */
    public function getTableList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <table>
     *
     * @param string $value
     * @return \Magma\DatasourceDto
     */
    public function addTable( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <view> has a value
     *
     * @return boolean
     */
    public function hasView(){
      return $this->_has(4);
    }
    
    /**
     * Clear <view> value
     *
     * @return \Magma\DatasourceDto
     */
    public function clearView(){
      return $this->_clear(4);
    }
    
    /**
     * Get <view> value
     *
     * @param int $idx
     * @return string
     */
    public function getView($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <view> value
     *
     * @param string $value
     * @return \Magma\DatasourceDto
     */
    public function setView( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <view>
     *
     * @return string[]
     */
    public function getViewList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <view>
     *
     * @param string $value
     * @return \Magma\DatasourceDto
     */
    public function addView( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \Magma\DatasourceDto
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \Magma\DatasourceDto
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace Magma {

  class TableDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $entityType = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var int */
    public $variableCount = null;
    
    /**  @var int */
    public $valueSetCount = null;
    
    /**  @var string */
    public $datasourceName = null;
    
    /**  @var \Magma\VariableDto[]  */
    public $variables = array();
    
    /**  @var string */
    public $viewLink = null;
    
    /**  @var \Magma\TimestampsDto */
    public $timestamps = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.TableDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING entityType = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 variableCount = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "variableCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 valueSetCount = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "valueSetCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING datasourceName = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "datasourceName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE variables = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "variables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\VariableDto';
      $descriptor->addField($f);

      // OPTIONAL STRING viewLink = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "viewLink";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Magma\TimestampsDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Magma\TableDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Magma\TableDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entityType> has a value
     *
     * @return boolean
     */
    public function hasEntityType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entityType> value
     *
     * @return \Magma\TableDto
     */
    public function clearEntityType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entityType> value
     *
     * @return string
     */
    public function getEntityType(){
      return $this->_get(2);
    }
    
    /**
     * Set <entityType> value
     *
     * @param string $value
     * @return \Magma\TableDto
     */
    public function setEntityType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(3);
    }
    
    /**
     * Clear <link> value
     *
     * @return \Magma\TableDto
     */
    public function clearLink(){
      return $this->_clear(3);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(3);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Magma\TableDto
     */
    public function setLink( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <variableCount> has a value
     *
     * @return boolean
     */
    public function hasVariableCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <variableCount> value
     *
     * @return \Magma\TableDto
     */
    public function clearVariableCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <variableCount> value
     *
     * @return int
     */
    public function getVariableCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <variableCount> value
     *
     * @param int $value
     * @return \Magma\TableDto
     */
    public function setVariableCount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <valueSetCount> has a value
     *
     * @return boolean
     */
    public function hasValueSetCount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <valueSetCount> value
     *
     * @return \Magma\TableDto
     */
    public function clearValueSetCount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <valueSetCount> value
     *
     * @return int
     */
    public function getValueSetCount(){
      return $this->_get(5);
    }
    
    /**
     * Set <valueSetCount> value
     *
     * @param int $value
     * @return \Magma\TableDto
     */
    public function setValueSetCount( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <datasourceName> has a value
     *
     * @return boolean
     */
    public function hasDatasourceName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <datasourceName> value
     *
     * @return \Magma\TableDto
     */
    public function clearDatasourceName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <datasourceName> value
     *
     * @return string
     */
    public function getDatasourceName(){
      return $this->_get(6);
    }
    
    /**
     * Set <datasourceName> value
     *
     * @param string $value
     * @return \Magma\TableDto
     */
    public function setDatasourceName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <variables> has a value
     *
     * @return boolean
     */
    public function hasVariables(){
      return $this->_has(7);
    }
    
    /**
     * Clear <variables> value
     *
     * @return \Magma\TableDto
     */
    public function clearVariables(){
      return $this->_clear(7);
    }
    
    /**
     * Get <variables> value
     *
     * @param int $idx
     * @return \Magma\VariableDto
     */
    public function getVariables($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <variables> value
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableDto
     */
    public function setVariables(\Magma\VariableDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <variables>
     *
     * @return \Magma\VariableDto[]
     */
    public function getVariablesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <variables>
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableDto
     */
    public function addVariables(\Magma\VariableDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <viewLink> has a value
     *
     * @return boolean
     */
    public function hasViewLink(){
      return $this->_has(8);
    }
    
    /**
     * Clear <viewLink> value
     *
     * @return \Magma\TableDto
     */
    public function clearViewLink(){
      return $this->_clear(8);
    }
    
    /**
     * Get <viewLink> value
     *
     * @return string
     */
    public function getViewLink(){
      return $this->_get(8);
    }
    
    /**
     * Set <viewLink> value
     *
     * @param string $value
     * @return \Magma\TableDto
     */
    public function setViewLink( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(9);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \Magma\TableDto
     */
    public function clearTimestamps(){
      return $this->_clear(9);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \Magma\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(9);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \Magma\TimestampsDto $value
     * @return \Magma\TableDto
     */
    public function setTimestamps(\Magma\TimestampsDto $value){
      return $this->_set(9, $value);
    }
  }
}

namespace Magma {

  class VariableDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $entityType = null;
    
    /**  @var string */
    public $valueType = null;
    
    /**  @var string */
    public $mimeType = null;
    
    /**  @var boolean */
    public $isRepeatable = null;
    
    /**  @var string */
    public $occurrenceGroup = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var \Magma\AttributeDto[]  */
    public $attributes = array();
    
    /**  @var \Magma\CategoryDto[]  */
    public $categories = array();
    
    /**  @var string */
    public $unit = null;
    
    /**  @var \Magma\LinkDto */
    public $parentLink = null;
    
    /**  @var boolean */
    public $isNewVariable = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var string */
    public $referencedEntityType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.VariableDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING entityType = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING valueType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "valueType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING mimeType = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mimeType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED BOOL isRepeatable = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "isRepeatable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING occurrenceGroup = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "occurrenceGroup";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\AttributeDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE categories = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "categories";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\CategoryDto';
      $descriptor->addField($f);

      // OPTIONAL STRING unit = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "unit";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE parentLink = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "parentLink";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Magma\LinkDto';
      $descriptor->addField($f);

      // OPTIONAL BOOL isNewVariable = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "isNewVariable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 index = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING referencedEntityType = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "referencedEntityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Magma\VariableDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Magma\VariableDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entityType> has a value
     *
     * @return boolean
     */
    public function hasEntityType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entityType> value
     *
     * @return \Magma\VariableDto
     */
    public function clearEntityType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entityType> value
     *
     * @return string
     */
    public function getEntityType(){
      return $this->_get(2);
    }
    
    /**
     * Set <entityType> value
     *
     * @param string $value
     * @return \Magma\VariableDto
     */
    public function setEntityType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <valueType> has a value
     *
     * @return boolean
     */
    public function hasValueType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <valueType> value
     *
     * @return \Magma\VariableDto
     */
    public function clearValueType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <valueType> value
     *
     * @return string
     */
    public function getValueType(){
      return $this->_get(3);
    }
    
    /**
     * Set <valueType> value
     *
     * @param string $value
     * @return \Magma\VariableDto
     */
    public function setValueType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mimeType> has a value
     *
     * @return boolean
     */
    public function hasMimeType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mimeType> value
     *
     * @return \Magma\VariableDto
     */
    public function clearMimeType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mimeType> value
     *
     * @return string
     */
    public function getMimeType(){
      return $this->_get(4);
    }
    
    /**
     * Set <mimeType> value
     *
     * @param string $value
     * @return \Magma\VariableDto
     */
    public function setMimeType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <isRepeatable> has a value
     *
     * @return boolean
     */
    public function hasIsRepeatable(){
      return $this->_has(5);
    }
    
    /**
     * Clear <isRepeatable> value
     *
     * @return \Magma\VariableDto
     */
    public function clearIsRepeatable(){
      return $this->_clear(5);
    }
    
    /**
     * Get <isRepeatable> value
     *
     * @return boolean
     */
    public function getIsRepeatable(){
      return $this->_get(5);
    }
    
    /**
     * Set <isRepeatable> value
     *
     * @param boolean $value
     * @return \Magma\VariableDto
     */
    public function setIsRepeatable( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <occurrenceGroup> has a value
     *
     * @return boolean
     */
    public function hasOccurrenceGroup(){
      return $this->_has(6);
    }
    
    /**
     * Clear <occurrenceGroup> value
     *
     * @return \Magma\VariableDto
     */
    public function clearOccurrenceGroup(){
      return $this->_clear(6);
    }
    
    /**
     * Get <occurrenceGroup> value
     *
     * @return string
     */
    public function getOccurrenceGroup(){
      return $this->_get(6);
    }
    
    /**
     * Set <occurrenceGroup> value
     *
     * @param string $value
     * @return \Magma\VariableDto
     */
    public function setOccurrenceGroup( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(7);
    }
    
    /**
     * Clear <link> value
     *
     * @return \Magma\VariableDto
     */
    public function clearLink(){
      return $this->_clear(7);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(7);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Magma\VariableDto
     */
    public function setLink( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(8);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \Magma\VariableDto
     */
    public function clearAttributes(){
      return $this->_clear(8);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \Magma\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \Magma\AttributeDto $value
     * @return \Magma\VariableDto
     */
    public function setAttributes(\Magma\AttributeDto $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \Magma\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \Magma\AttributeDto $value
     * @return \Magma\VariableDto
     */
    public function addAttributes(\Magma\AttributeDto $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <categories> has a value
     *
     * @return boolean
     */
    public function hasCategories(){
      return $this->_has(9);
    }
    
    /**
     * Clear <categories> value
     *
     * @return \Magma\VariableDto
     */
    public function clearCategories(){
      return $this->_clear(9);
    }
    
    /**
     * Get <categories> value
     *
     * @param int $idx
     * @return \Magma\CategoryDto
     */
    public function getCategories($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <categories> value
     *
     * @param \Magma\CategoryDto $value
     * @return \Magma\VariableDto
     */
    public function setCategories(\Magma\CategoryDto $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <categories>
     *
     * @return \Magma\CategoryDto[]
     */
    public function getCategoriesList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <categories>
     *
     * @param \Magma\CategoryDto $value
     * @return \Magma\VariableDto
     */
    public function addCategories(\Magma\CategoryDto $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <unit> has a value
     *
     * @return boolean
     */
    public function hasUnit(){
      return $this->_has(10);
    }
    
    /**
     * Clear <unit> value
     *
     * @return \Magma\VariableDto
     */
    public function clearUnit(){
      return $this->_clear(10);
    }
    
    /**
     * Get <unit> value
     *
     * @return string
     */
    public function getUnit(){
      return $this->_get(10);
    }
    
    /**
     * Set <unit> value
     *
     * @param string $value
     * @return \Magma\VariableDto
     */
    public function setUnit( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <parentLink> has a value
     *
     * @return boolean
     */
    public function hasParentLink(){
      return $this->_has(11);
    }
    
    /**
     * Clear <parentLink> value
     *
     * @return \Magma\VariableDto
     */
    public function clearParentLink(){
      return $this->_clear(11);
    }
    
    /**
     * Get <parentLink> value
     *
     * @return \Magma\LinkDto
     */
    public function getParentLink(){
      return $this->_get(11);
    }
    
    /**
     * Set <parentLink> value
     *
     * @param \Magma\LinkDto $value
     * @return \Magma\VariableDto
     */
    public function setParentLink(\Magma\LinkDto $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <isNewVariable> has a value
     *
     * @return boolean
     */
    public function hasIsNewVariable(){
      return $this->_has(12);
    }
    
    /**
     * Clear <isNewVariable> value
     *
     * @return \Magma\VariableDto
     */
    public function clearIsNewVariable(){
      return $this->_clear(12);
    }
    
    /**
     * Get <isNewVariable> value
     *
     * @return boolean
     */
    public function getIsNewVariable(){
      return $this->_get(12);
    }
    
    /**
     * Set <isNewVariable> value
     *
     * @param boolean $value
     * @return \Magma\VariableDto
     */
    public function setIsNewVariable( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(13);
    }
    
    /**
     * Clear <index> value
     *
     * @return \Magma\VariableDto
     */
    public function clearIndex(){
      return $this->_clear(13);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(13);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \Magma\VariableDto
     */
    public function setIndex( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <referencedEntityType> has a value
     *
     * @return boolean
     */
    public function hasReferencedEntityType(){
      return $this->_has(14);
    }
    
    /**
     * Clear <referencedEntityType> value
     *
     * @return \Magma\VariableDto
     */
    public function clearReferencedEntityType(){
      return $this->_clear(14);
    }
    
    /**
     * Get <referencedEntityType> value
     *
     * @return string
     */
    public function getReferencedEntityType(){
      return $this->_get(14);
    }
    
    /**
     * Set <referencedEntityType> value
     *
     * @param string $value
     * @return \Magma\VariableDto
     */
    public function setReferencedEntityType( $value){
      return $this->_set(14, $value);
    }
  }
}

namespace Magma {

  class CategoryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var boolean */
    public $isMissing = null;
    
    /**  @var \Magma\AttributeDto[]  */
    public $attributes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.CategoryDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL isMissing = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "isMissing";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\AttributeDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Magma\CategoryDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Magma\CategoryDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <isMissing> has a value
     *
     * @return boolean
     */
    public function hasIsMissing(){
      return $this->_has(2);
    }
    
    /**
     * Clear <isMissing> value
     *
     * @return \Magma\CategoryDto
     */
    public function clearIsMissing(){
      return $this->_clear(2);
    }
    
    /**
     * Get <isMissing> value
     *
     * @return boolean
     */
    public function getIsMissing(){
      return $this->_get(2);
    }
    
    /**
     * Set <isMissing> value
     *
     * @param boolean $value
     * @return \Magma\CategoryDto
     */
    public function setIsMissing( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \Magma\CategoryDto
     */
    public function clearAttributes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \Magma\AttributeDto
     */
    public function getAttributes($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \Magma\AttributeDto $value
     * @return \Magma\CategoryDto
     */
    public function setAttributes(\Magma\AttributeDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \Magma\AttributeDto[]
     */
    public function getAttributesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \Magma\AttributeDto $value
     * @return \Magma\CategoryDto
     */
    public function addAttributes(\Magma\AttributeDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Magma {

  class AttributeDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $value = null;
    
    /**  @var string */
    public $locale = null;
    
    /**  @var string */
    public $namespace = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.AttributeDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING locale = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "locale";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Magma\AttributeDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Magma\AttributeDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Magma\AttributeDto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Magma\AttributeDto
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <locale> has a value
     *
     * @return boolean
     */
    public function hasLocale(){
      return $this->_has(3);
    }
    
    /**
     * Clear <locale> value
     *
     * @return \Magma\AttributeDto
     */
    public function clearLocale(){
      return $this->_clear(3);
    }
    
    /**
     * Get <locale> value
     *
     * @return string
     */
    public function getLocale(){
      return $this->_get(3);
    }
    
    /**
     * Set <locale> value
     *
     * @param string $value
     * @return \Magma\AttributeDto
     */
    public function setLocale( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(4);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \Magma\AttributeDto
     */
    public function clearNamespace(){
      return $this->_clear(4);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(4);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \Magma\AttributeDto
     */
    public function setNamespace( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace Magma\ValueSetsDto {

  class ValueSetDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $identifier = null;
    
    /**  @var \Magma\ValueSetsDto\ValueDto[]  */
    public $values = array();
    
    /**  @var \Magma\TimestampsDto */
    public $timestamps = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.ValueSetsDto.ValueSetDto');

      // REQUIRED STRING identifier = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "identifier";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE values = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\ValueSetsDto\ValueDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Magma\TimestampsDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <identifier> has a value
     *
     * @return boolean
     */
    public function hasIdentifier(){
      return $this->_has(1);
    }
    
    /**
     * Clear <identifier> value
     *
     * @return \Magma\ValueSetsDto\ValueSetDto
     */
    public function clearIdentifier(){
      return $this->_clear(1);
    }
    
    /**
     * Get <identifier> value
     *
     * @return string
     */
    public function getIdentifier(){
      return $this->_get(1);
    }
    
    /**
     * Set <identifier> value
     *
     * @param string $value
     * @return \Magma\ValueSetsDto\ValueSetDto
     */
    public function setIdentifier( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(2);
    }
    
    /**
     * Clear <values> value
     *
     * @return \Magma\ValueSetsDto\ValueSetDto
     */
    public function clearValues(){
      return $this->_clear(2);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return \Magma\ValueSetsDto\ValueDto
     */
    public function getValues($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param \Magma\ValueSetsDto\ValueDto $value
     * @return \Magma\ValueSetsDto\ValueSetDto
     */
    public function setValues(\Magma\ValueSetsDto\ValueDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return \Magma\ValueSetsDto\ValueDto[]
     */
    public function getValuesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param \Magma\ValueSetsDto\ValueDto $value
     * @return \Magma\ValueSetsDto\ValueSetDto
     */
    public function addValues(\Magma\ValueSetsDto\ValueDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(3);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \Magma\ValueSetsDto\ValueSetDto
     */
    public function clearTimestamps(){
      return $this->_clear(3);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \Magma\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(3);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \Magma\TimestampsDto $value
     * @return \Magma\ValueSetsDto\ValueSetDto
     */
    public function setTimestamps(\Magma\TimestampsDto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Magma\ValueSetsDto {

  class ValueDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $value = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var \Magma\ValueSetsDto\ValueDto[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.ValueSetsDto.ValueDto');

      // OPTIONAL STRING value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE values = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\ValueSetsDto\ValueDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Magma\ValueSetsDto\ValueDto
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Magma\ValueSetsDto\ValueDto
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(2);
    }
    
    /**
     * Clear <link> value
     *
     * @return \Magma\ValueSetsDto\ValueDto
     */
    public function clearLink(){
      return $this->_clear(2);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(2);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Magma\ValueSetsDto\ValueDto
     */
    public function setLink( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(3);
    }
    
    /**
     * Clear <values> value
     *
     * @return \Magma\ValueSetsDto\ValueDto
     */
    public function clearValues(){
      return $this->_clear(3);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return \Magma\ValueSetsDto\ValueDto
     */
    public function getValues($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param \Magma\ValueSetsDto\ValueDto $value
     * @return \Magma\ValueSetsDto\ValueDto
     */
    public function setValues(\Magma\ValueSetsDto\ValueDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return \Magma\ValueSetsDto\ValueDto[]
     */
    public function getValuesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param \Magma\ValueSetsDto\ValueDto $value
     * @return \Magma\ValueSetsDto\ValueDto
     */
    public function addValues(\Magma\ValueSetsDto\ValueDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Magma {

  class ValueSetsDto extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $variables = array();
    
    /**  @var \Magma\ValueSetsDto\ValueSetDto[]  */
    public $valueSets = array();
    
    /**  @var string */
    public $entityType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.ValueSetsDto');

      // REPEATED STRING variables = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variables";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE valueSets = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "valueSets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\ValueSetsDto\ValueSetDto';
      $descriptor->addField($f);

      // REQUIRED STRING entityType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "entityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variables> has a value
     *
     * @return boolean
     */
    public function hasVariables(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variables> value
     *
     * @return \Magma\ValueSetsDto
     */
    public function clearVariables(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variables> value
     *
     * @param int $idx
     * @return string
     */
    public function getVariables($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <variables> value
     *
     * @param string $value
     * @return \Magma\ValueSetsDto
     */
    public function setVariables( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <variables>
     *
     * @return string[]
     */
    public function getVariablesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <variables>
     *
     * @param string $value
     * @return \Magma\ValueSetsDto
     */
    public function addVariables( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <valueSets> has a value
     *
     * @return boolean
     */
    public function hasValueSets(){
      return $this->_has(2);
    }
    
    /**
     * Clear <valueSets> value
     *
     * @return \Magma\ValueSetsDto
     */
    public function clearValueSets(){
      return $this->_clear(2);
    }
    
    /**
     * Get <valueSets> value
     *
     * @param int $idx
     * @return \Magma\ValueSetsDto\ValueSetDto
     */
    public function getValueSets($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <valueSets> value
     *
     * @param \Magma\ValueSetsDto\ValueSetDto $value
     * @return \Magma\ValueSetsDto
     */
    public function setValueSets(\Magma\ValueSetsDto\ValueSetDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <valueSets>
     *
     * @return \Magma\ValueSetsDto\ValueSetDto[]
     */
    public function getValueSetsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <valueSets>
     *
     * @param \Magma\ValueSetsDto\ValueSetDto $value
     * @return \Magma\ValueSetsDto
     */
    public function addValueSets(\Magma\ValueSetsDto\ValueSetDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <entityType> has a value
     *
     * @return boolean
     */
    public function hasEntityType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <entityType> value
     *
     * @return \Magma\ValueSetsDto
     */
    public function clearEntityType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <entityType> value
     *
     * @return string
     */
    public function getEntityType(){
      return $this->_get(3);
    }
    
    /**
     * Set <entityType> value
     *
     * @param string $value
     * @return \Magma\ValueSetsDto
     */
    public function setEntityType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Magma {

  class VariableEntityDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $identifier = null;
    
    /**  @var string */
    public $entityType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.VariableEntityDto');

      // REQUIRED STRING identifier = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "identifier";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING entityType = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entityType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <identifier> has a value
     *
     * @return boolean
     */
    public function hasIdentifier(){
      return $this->_has(1);
    }
    
    /**
     * Clear <identifier> value
     *
     * @return \Magma\VariableEntityDto
     */
    public function clearIdentifier(){
      return $this->_clear(1);
    }
    
    /**
     * Get <identifier> value
     *
     * @return string
     */
    public function getIdentifier(){
      return $this->_get(1);
    }
    
    /**
     * Set <identifier> value
     *
     * @param string $value
     * @return \Magma\VariableEntityDto
     */
    public function setIdentifier( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entityType> has a value
     *
     * @return boolean
     */
    public function hasEntityType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entityType> value
     *
     * @return \Magma\VariableEntityDto
     */
    public function clearEntityType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entityType> value
     *
     * @return string
     */
    public function getEntityType(){
      return $this->_get(2);
    }
    
    /**
     * Set <entityType> value
     *
     * @param string $value
     * @return \Magma\VariableEntityDto
     */
    public function setEntityType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class TimestampsDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $created = null;
    
    /**  @var string */
    public $lastUpdate = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.TimestampsDto');

      // OPTIONAL STRING created = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "created";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING lastUpdate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lastUpdate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated(){
      return $this->_has(1);
    }
    
    /**
     * Clear <created> value
     *
     * @return \Magma\TimestampsDto
     */
    public function clearCreated(){
      return $this->_clear(1);
    }
    
    /**
     * Get <created> value
     *
     * @return string
     */
    public function getCreated(){
      return $this->_get(1);
    }
    
    /**
     * Set <created> value
     *
     * @param string $value
     * @return \Magma\TimestampsDto
     */
    public function setCreated( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lastUpdate> has a value
     *
     * @return boolean
     */
    public function hasLastUpdate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lastUpdate> value
     *
     * @return \Magma\TimestampsDto
     */
    public function clearLastUpdate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lastUpdate> value
     *
     * @return string
     */
    public function getLastUpdate(){
      return $this->_get(2);
    }
    
    /**
     * Set <lastUpdate> value
     *
     * @param string $value
     * @return \Magma\TimestampsDto
     */
    public function setLastUpdate( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class LinkDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $rel = null;
    
    /**  @var string */
    public $link = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.LinkDto');

      // REQUIRED STRING rel = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "rel";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING link = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <rel> has a value
     *
     * @return boolean
     */
    public function hasRel(){
      return $this->_has(1);
    }
    
    /**
     * Clear <rel> value
     *
     * @return \Magma\LinkDto
     */
    public function clearRel(){
      return $this->_clear(1);
    }
    
    /**
     * Get <rel> value
     *
     * @return string
     */
    public function getRel(){
      return $this->_get(1);
    }
    
    /**
     * Set <rel> value
     *
     * @param string $value
     * @return \Magma\LinkDto
     */
    public function setRel( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(2);
    }
    
    /**
     * Clear <link> value
     *
     * @return \Magma\LinkDto
     */
    public function clearLink(){
      return $this->_clear(2);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(2);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Magma\LinkDto
     */
    public function setLink( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class ViewDto extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $from = array();
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $datasourceName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.ViewDto');

      // REPEATED STRING from = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING datasourceName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "datasourceName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(1);
    }
    
    /**
     * Clear <from> value
     *
     * @return \Magma\ViewDto
     */
    public function clearFrom(){
      return $this->_clear(1);
    }
    
    /**
     * Get <from> value
     *
     * @param int $idx
     * @return string
     */
    public function getFrom($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <from> value
     *
     * @param string $value
     * @return \Magma\ViewDto
     */
    public function setFrom( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <from>
     *
     * @return string[]
     */
    public function getFromList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <from>
     *
     * @param string $value
     * @return \Magma\ViewDto
     */
    public function addFrom( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Magma\ViewDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Magma\ViewDto
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <datasourceName> has a value
     *
     * @return boolean
     */
    public function hasDatasourceName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <datasourceName> value
     *
     * @return \Magma\ViewDto
     */
    public function clearDatasourceName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <datasourceName> value
     *
     * @return string
     */
    public function getDatasourceName(){
      return $this->_get(3);
    }
    
    /**
     * Set <datasourceName> value
     *
     * @param string $value
     * @return \Magma\ViewDto
     */
    public function setDatasourceName( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Magma {

  class JavaScriptViewDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $select = null;
    
    /**  @var string */
    public $where = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.JavaScriptViewDto');

      // OPTIONAL STRING select = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "select";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING where = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "where";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <select> has a value
     *
     * @return boolean
     */
    public function hasSelect(){
      return $this->_has(1);
    }
    
    /**
     * Clear <select> value
     *
     * @return \Magma\JavaScriptViewDto
     */
    public function clearSelect(){
      return $this->_clear(1);
    }
    
    /**
     * Get <select> value
     *
     * @return string
     */
    public function getSelect(){
      return $this->_get(1);
    }
    
    /**
     * Set <select> value
     *
     * @param string $value
     * @return \Magma\JavaScriptViewDto
     */
    public function setSelect( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <where> has a value
     *
     * @return boolean
     */
    public function hasWhere(){
      return $this->_has(2);
    }
    
    /**
     * Clear <where> value
     *
     * @return \Magma\JavaScriptViewDto
     */
    public function clearWhere(){
      return $this->_clear(2);
    }
    
    /**
     * Get <where> value
     *
     * @return string
     */
    public function getWhere(){
      return $this->_get(2);
    }
    
    /**
     * Set <where> value
     *
     * @param string $value
     * @return \Magma\JavaScriptViewDto
     */
    public function setWhere( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class VariableListViewDto extends \DrSlump\Protobuf\Message {

    /**  @var \Magma\VariableDto[]  */
    public $variables = array();
    
    /**  @var string */
    public $where = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.VariableListViewDto');

      // REPEATED MESSAGE variables = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\VariableDto';
      $descriptor->addField($f);

      // OPTIONAL STRING where = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "where";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variables> has a value
     *
     * @return boolean
     */
    public function hasVariables(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variables> value
     *
     * @return \Magma\VariableListViewDto
     */
    public function clearVariables(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variables> value
     *
     * @param int $idx
     * @return \Magma\VariableDto
     */
    public function getVariables($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <variables> value
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\VariableListViewDto
     */
    public function setVariables(\Magma\VariableDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <variables>
     *
     * @return \Magma\VariableDto[]
     */
    public function getVariablesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <variables>
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\VariableListViewDto
     */
    public function addVariables(\Magma\VariableDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <where> has a value
     *
     * @return boolean
     */
    public function hasWhere(){
      return $this->_has(2);
    }
    
    /**
     * Clear <where> value
     *
     * @return \Magma\VariableListViewDto
     */
    public function clearWhere(){
      return $this->_clear(2);
    }
    
    /**
     * Get <where> value
     *
     * @return string
     */
    public function getWhere(){
      return $this->_get(2);
    }
    
    /**
     * Set <where> value
     *
     * @param string $value
     * @return \Magma\VariableListViewDto
     */
    public function setWhere( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class OutlierRemovingViewDto extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $stdDevMultiplier = null;
    
    /**  @var string */
    public $valueForOutlier = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.OutlierRemovingViewDto');

      // REQUIRED DOUBLE stdDevMultiplier = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "stdDevMultiplier";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING valueForOutlier = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "valueForOutlier";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <stdDevMultiplier> has a value
     *
     * @return boolean
     */
    public function hasStdDevMultiplier(){
      return $this->_has(1);
    }
    
    /**
     * Clear <stdDevMultiplier> value
     *
     * @return \Magma\OutlierRemovingViewDto
     */
    public function clearStdDevMultiplier(){
      return $this->_clear(1);
    }
    
    /**
     * Get <stdDevMultiplier> value
     *
     * @return float
     */
    public function getStdDevMultiplier(){
      return $this->_get(1);
    }
    
    /**
     * Set <stdDevMultiplier> value
     *
     * @param float $value
     * @return \Magma\OutlierRemovingViewDto
     */
    public function setStdDevMultiplier( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <valueForOutlier> has a value
     *
     * @return boolean
     */
    public function hasValueForOutlier(){
      return $this->_has(2);
    }
    
    /**
     * Clear <valueForOutlier> value
     *
     * @return \Magma\OutlierRemovingViewDto
     */
    public function clearValueForOutlier(){
      return $this->_clear(2);
    }
    
    /**
     * Get <valueForOutlier> value
     *
     * @return string
     */
    public function getValueForOutlier(){
      return $this->_get(2);
    }
    
    /**
     * Set <valueForOutlier> value
     *
     * @param string $value
     * @return \Magma\OutlierRemovingViewDto
     */
    public function setValueForOutlier( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma\FileViewDto {

  class FileViewType extends \DrSlump\Protobuf\Enum {
    const SERIALIZED_XML = 0;
    const EXCEL = 1;
  }
}
namespace Magma {

  class FileViewDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $filename = null;
    
    /**  @var int - \Magma\FileViewDto\FileViewType */
    public $type = \Magma\FileViewDto\FileViewType::SERIALIZED_XML;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.FileViewDto');

      // REQUIRED STRING filename = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "filename";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Magma\FileViewDto\FileViewType';
      $f->default   = \Magma\FileViewDto\FileViewType::SERIALIZED_XML;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <filename> has a value
     *
     * @return boolean
     */
    public function hasFilename(){
      return $this->_has(1);
    }
    
    /**
     * Clear <filename> value
     *
     * @return \Magma\FileViewDto
     */
    public function clearFilename(){
      return $this->_clear(1);
    }
    
    /**
     * Get <filename> value
     *
     * @return string
     */
    public function getFilename(){
      return $this->_get(1);
    }
    
    /**
     * Set <filename> value
     *
     * @param string $value
     * @return \Magma\FileViewDto
     */
    public function setFilename( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \Magma\FileViewDto
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \Magma\FileViewDto\FileViewType
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \Magma\FileViewDto\FileViewType $value
     * @return \Magma\FileViewDto
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Magma {

  class JavaScriptErrorDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $message = null;
    
    /**  @var string */
    public $sourceName = null;
    
    /**  @var int */
    public $lineNumber = null;
    
    /**  @var string */
    public $lineSource = null;
    
    /**  @var int */
    public $columnNumber = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.JavaScriptErrorDto');

      // REQUIRED STRING message = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING sourceName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sourceName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 lineNumber = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lineNumber";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING lineSource = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "lineSource";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 columnNumber = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "columnNumber";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <message> value
     *
     * @return \Magma\JavaScriptErrorDto
     */
    public function clearMessage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(1);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \Magma\JavaScriptErrorDto
     */
    public function setMessage( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sourceName> has a value
     *
     * @return boolean
     */
    public function hasSourceName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sourceName> value
     *
     * @return \Magma\JavaScriptErrorDto
     */
    public function clearSourceName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sourceName> value
     *
     * @return string
     */
    public function getSourceName(){
      return $this->_get(2);
    }
    
    /**
     * Set <sourceName> value
     *
     * @param string $value
     * @return \Magma\JavaScriptErrorDto
     */
    public function setSourceName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <lineNumber> has a value
     *
     * @return boolean
     */
    public function hasLineNumber(){
      return $this->_has(3);
    }
    
    /**
     * Clear <lineNumber> value
     *
     * @return \Magma\JavaScriptErrorDto
     */
    public function clearLineNumber(){
      return $this->_clear(3);
    }
    
    /**
     * Get <lineNumber> value
     *
     * @return int
     */
    public function getLineNumber(){
      return $this->_get(3);
    }
    
    /**
     * Set <lineNumber> value
     *
     * @param int $value
     * @return \Magma\JavaScriptErrorDto
     */
    public function setLineNumber( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <lineSource> has a value
     *
     * @return boolean
     */
    public function hasLineSource(){
      return $this->_has(4);
    }
    
    /**
     * Clear <lineSource> value
     *
     * @return \Magma\JavaScriptErrorDto
     */
    public function clearLineSource(){
      return $this->_clear(4);
    }
    
    /**
     * Get <lineSource> value
     *
     * @return string
     */
    public function getLineSource(){
      return $this->_get(4);
    }
    
    /**
     * Set <lineSource> value
     *
     * @param string $value
     * @return \Magma\JavaScriptErrorDto
     */
    public function setLineSource( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <columnNumber> has a value
     *
     * @return boolean
     */
    public function hasColumnNumber(){
      return $this->_has(5);
    }
    
    /**
     * Clear <columnNumber> value
     *
     * @return \Magma\JavaScriptErrorDto
     */
    public function clearColumnNumber(){
      return $this->_clear(5);
    }
    
    /**
     * Get <columnNumber> value
     *
     * @return int
     */
    public function getColumnNumber(){
      return $this->_get(5);
    }
    
    /**
     * Set <columnNumber> value
     *
     * @param int $value
     * @return \Magma\JavaScriptErrorDto
     */
    public function setColumnNumber( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace Magma {

  class TableCompareDto extends \DrSlump\Protobuf\Message {

    /**  @var \Magma\TableDto */
    public $compared = null;
    
    /**  @var \Magma\TableDto */
    public $withTable = null;
    
    /**  @var \Magma\VariableDto[]  */
    public $newVariables = array();
    
    /**  @var \Magma\VariableDto[]  */
    public $unmodifiedVariables = array();
    
    /**  @var \Magma\VariableDto[]  */
    public $missingVariables = array();
    
    /**  @var \Magma\ConflictDto[]  */
    public $conflicts = array();
    
    /**  @var \Magma\VariableDto[]  */
    public $modifiedVariables = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.TableCompareDto');

      // REQUIRED MESSAGE compared = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "compared";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Magma\TableDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE withTable = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "withTable";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Magma\TableDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE newVariables = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "newVariables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\VariableDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE unmodifiedVariables = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "unmodifiedVariables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\VariableDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE missingVariables = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "missingVariables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\VariableDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE conflicts = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "conflicts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\ConflictDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE modifiedVariables = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "modifiedVariables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\VariableDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <compared> has a value
     *
     * @return boolean
     */
    public function hasCompared(){
      return $this->_has(1);
    }
    
    /**
     * Clear <compared> value
     *
     * @return \Magma\TableCompareDto
     */
    public function clearCompared(){
      return $this->_clear(1);
    }
    
    /**
     * Get <compared> value
     *
     * @return \Magma\TableDto
     */
    public function getCompared(){
      return $this->_get(1);
    }
    
    /**
     * Set <compared> value
     *
     * @param \Magma\TableDto $value
     * @return \Magma\TableCompareDto
     */
    public function setCompared(\Magma\TableDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <withTable> has a value
     *
     * @return boolean
     */
    public function hasWithTable(){
      return $this->_has(2);
    }
    
    /**
     * Clear <withTable> value
     *
     * @return \Magma\TableCompareDto
     */
    public function clearWithTable(){
      return $this->_clear(2);
    }
    
    /**
     * Get <withTable> value
     *
     * @return \Magma\TableDto
     */
    public function getWithTable(){
      return $this->_get(2);
    }
    
    /**
     * Set <withTable> value
     *
     * @param \Magma\TableDto $value
     * @return \Magma\TableCompareDto
     */
    public function setWithTable(\Magma\TableDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <newVariables> has a value
     *
     * @return boolean
     */
    public function hasNewVariables(){
      return $this->_has(3);
    }
    
    /**
     * Clear <newVariables> value
     *
     * @return \Magma\TableCompareDto
     */
    public function clearNewVariables(){
      return $this->_clear(3);
    }
    
    /**
     * Get <newVariables> value
     *
     * @param int $idx
     * @return \Magma\VariableDto
     */
    public function getNewVariables($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <newVariables> value
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableCompareDto
     */
    public function setNewVariables(\Magma\VariableDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <newVariables>
     *
     * @return \Magma\VariableDto[]
     */
    public function getNewVariablesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <newVariables>
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableCompareDto
     */
    public function addNewVariables(\Magma\VariableDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <unmodifiedVariables> has a value
     *
     * @return boolean
     */
    public function hasUnmodifiedVariables(){
      return $this->_has(4);
    }
    
    /**
     * Clear <unmodifiedVariables> value
     *
     * @return \Magma\TableCompareDto
     */
    public function clearUnmodifiedVariables(){
      return $this->_clear(4);
    }
    
    /**
     * Get <unmodifiedVariables> value
     *
     * @param int $idx
     * @return \Magma\VariableDto
     */
    public function getUnmodifiedVariables($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <unmodifiedVariables> value
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableCompareDto
     */
    public function setUnmodifiedVariables(\Magma\VariableDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <unmodifiedVariables>
     *
     * @return \Magma\VariableDto[]
     */
    public function getUnmodifiedVariablesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <unmodifiedVariables>
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableCompareDto
     */
    public function addUnmodifiedVariables(\Magma\VariableDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <missingVariables> has a value
     *
     * @return boolean
     */
    public function hasMissingVariables(){
      return $this->_has(5);
    }
    
    /**
     * Clear <missingVariables> value
     *
     * @return \Magma\TableCompareDto
     */
    public function clearMissingVariables(){
      return $this->_clear(5);
    }
    
    /**
     * Get <missingVariables> value
     *
     * @param int $idx
     * @return \Magma\VariableDto
     */
    public function getMissingVariables($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <missingVariables> value
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableCompareDto
     */
    public function setMissingVariables(\Magma\VariableDto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <missingVariables>
     *
     * @return \Magma\VariableDto[]
     */
    public function getMissingVariablesList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <missingVariables>
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableCompareDto
     */
    public function addMissingVariables(\Magma\VariableDto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <conflicts> has a value
     *
     * @return boolean
     */
    public function hasConflicts(){
      return $this->_has(6);
    }
    
    /**
     * Clear <conflicts> value
     *
     * @return \Magma\TableCompareDto
     */
    public function clearConflicts(){
      return $this->_clear(6);
    }
    
    /**
     * Get <conflicts> value
     *
     * @param int $idx
     * @return \Magma\ConflictDto
     */
    public function getConflicts($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <conflicts> value
     *
     * @param \Magma\ConflictDto $value
     * @return \Magma\TableCompareDto
     */
    public function setConflicts(\Magma\ConflictDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <conflicts>
     *
     * @return \Magma\ConflictDto[]
     */
    public function getConflictsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <conflicts>
     *
     * @param \Magma\ConflictDto $value
     * @return \Magma\TableCompareDto
     */
    public function addConflicts(\Magma\ConflictDto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <modifiedVariables> has a value
     *
     * @return boolean
     */
    public function hasModifiedVariables(){
      return $this->_has(7);
    }
    
    /**
     * Clear <modifiedVariables> value
     *
     * @return \Magma\TableCompareDto
     */
    public function clearModifiedVariables(){
      return $this->_clear(7);
    }
    
    /**
     * Get <modifiedVariables> value
     *
     * @param int $idx
     * @return \Magma\VariableDto
     */
    public function getModifiedVariables($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <modifiedVariables> value
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableCompareDto
     */
    public function setModifiedVariables(\Magma\VariableDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <modifiedVariables>
     *
     * @return \Magma\VariableDto[]
     */
    public function getModifiedVariablesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <modifiedVariables>
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\TableCompareDto
     */
    public function addModifiedVariables(\Magma\VariableDto $value){
     return $this->_add(7, $value);
    }
  }
}

namespace Magma {

  class ConflictDto extends \DrSlump\Protobuf\Message {

    /**  @var \Magma\VariableDto */
    public $variable = null;
    
    /**  @var string */
    public $code = null;
    
    /**  @var string[]  */
    public $arguments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.ConflictDto');

      // REQUIRED MESSAGE variable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variable";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Magma\VariableDto';
      $descriptor->addField($f);

      // REQUIRED STRING code = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING arguments = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "arguments";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variable> has a value
     *
     * @return boolean
     */
    public function hasVariable(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variable> value
     *
     * @return \Magma\ConflictDto
     */
    public function clearVariable(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variable> value
     *
     * @return \Magma\VariableDto
     */
    public function getVariable(){
      return $this->_get(1);
    }
    
    /**
     * Set <variable> value
     *
     * @param \Magma\VariableDto $value
     * @return \Magma\ConflictDto
     */
    public function setVariable(\Magma\VariableDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <code> value
     *
     * @return \Magma\ConflictDto
     */
    public function clearCode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <code> value
     *
     * @return string
     */
    public function getCode(){
      return $this->_get(2);
    }
    
    /**
     * Set <code> value
     *
     * @param string $value
     * @return \Magma\ConflictDto
     */
    public function setCode( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <arguments> has a value
     *
     * @return boolean
     */
    public function hasArguments(){
      return $this->_has(3);
    }
    
    /**
     * Clear <arguments> value
     *
     * @return \Magma\ConflictDto
     */
    public function clearArguments(){
      return $this->_clear(3);
    }
    
    /**
     * Get <arguments> value
     *
     * @param int $idx
     * @return string
     */
    public function getArguments($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <arguments> value
     *
     * @param string $value
     * @return \Magma\ConflictDto
     */
    public function setArguments( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <arguments>
     *
     * @return string[]
     */
    public function getArgumentsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <arguments>
     *
     * @param string $value
     * @return \Magma\ConflictDto
     */
    public function addArguments( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Magma {

  class DatasourceCompareDto extends \DrSlump\Protobuf\Message {

    /**  @var \Magma\DatasourceDto */
    public $compared = null;
    
    /**  @var \Magma\DatasourceDto */
    public $withDatasource = null;
    
    /**  @var \Magma\TableCompareDto[]  */
    public $tableComparisons = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.DatasourceCompareDto');

      // REQUIRED MESSAGE compared = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "compared";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Magma\DatasourceDto';
      $descriptor->addField($f);

      // REQUIRED MESSAGE withDatasource = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "withDatasource";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Magma\DatasourceDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE tableComparisons = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tableComparisons";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Magma\TableCompareDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <compared> has a value
     *
     * @return boolean
     */
    public function hasCompared(){
      return $this->_has(1);
    }
    
    /**
     * Clear <compared> value
     *
     * @return \Magma\DatasourceCompareDto
     */
    public function clearCompared(){
      return $this->_clear(1);
    }
    
    /**
     * Get <compared> value
     *
     * @return \Magma\DatasourceDto
     */
    public function getCompared(){
      return $this->_get(1);
    }
    
    /**
     * Set <compared> value
     *
     * @param \Magma\DatasourceDto $value
     * @return \Magma\DatasourceCompareDto
     */
    public function setCompared(\Magma\DatasourceDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <withDatasource> has a value
     *
     * @return boolean
     */
    public function hasWithDatasource(){
      return $this->_has(2);
    }
    
    /**
     * Clear <withDatasource> value
     *
     * @return \Magma\DatasourceCompareDto
     */
    public function clearWithDatasource(){
      return $this->_clear(2);
    }
    
    /**
     * Get <withDatasource> value
     *
     * @return \Magma\DatasourceDto
     */
    public function getWithDatasource(){
      return $this->_get(2);
    }
    
    /**
     * Set <withDatasource> value
     *
     * @param \Magma\DatasourceDto $value
     * @return \Magma\DatasourceCompareDto
     */
    public function setWithDatasource(\Magma\DatasourceDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tableComparisons> has a value
     *
     * @return boolean
     */
    public function hasTableComparisons(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tableComparisons> value
     *
     * @return \Magma\DatasourceCompareDto
     */
    public function clearTableComparisons(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tableComparisons> value
     *
     * @param int $idx
     * @return \Magma\TableCompareDto
     */
    public function getTableComparisons($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <tableComparisons> value
     *
     * @param \Magma\TableCompareDto $value
     * @return \Magma\DatasourceCompareDto
     */
    public function setTableComparisons(\Magma\TableCompareDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <tableComparisons>
     *
     * @return \Magma\TableCompareDto[]
     */
    public function getTableComparisonsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <tableComparisons>
     *
     * @param \Magma\TableCompareDto $value
     * @return \Magma\DatasourceCompareDto
     */
    public function addTableComparisons(\Magma\TableCompareDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Magma {

  class TableIdentifiersSync extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $datasource = null;
    
    /**  @var string */
    public $table = null;
    
    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Magma.TableIdentifiersSync');

      // REQUIRED STRING datasource = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "datasource";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING table = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 total = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 count = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <datasource> has a value
     *
     * @return boolean
     */
    public function hasDatasource(){
      return $this->_has(1);
    }
    
    /**
     * Clear <datasource> value
     *
     * @return \Magma\TableIdentifiersSync
     */
    public function clearDatasource(){
      return $this->_clear(1);
    }
    
    /**
     * Get <datasource> value
     *
     * @return string
     */
    public function getDatasource(){
      return $this->_get(1);
    }
    
    /**
     * Set <datasource> value
     *
     * @param string $value
     * @return \Magma\TableIdentifiersSync
     */
    public function setDatasource( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable(){
      return $this->_has(2);
    }
    
    /**
     * Clear <table> value
     *
     * @return \Magma\TableIdentifiersSync
     */
    public function clearTable(){
      return $this->_clear(2);
    }
    
    /**
     * Get <table> value
     *
     * @return string
     */
    public function getTable(){
      return $this->_get(2);
    }
    
    /**
     * Set <table> value
     *
     * @param string $value
     * @return \Magma\TableIdentifiersSync
     */
    public function setTable( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(3);
    }
    
    /**
     * Clear <total> value
     *
     * @return \Magma\TableIdentifiersSync
     */
    public function clearTotal(){
      return $this->_clear(3);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(3);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \Magma\TableIdentifiersSync
     */
    public function setTotal( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <count> value
     *
     * @return \Magma\TableIdentifiersSync
     */
    public function clearCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \Magma\TableIdentifiersSync
     */
    public function setCount( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace {
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.ExcelDatasourceFactoryDto.params = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "Magma.ExcelDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\ExcelDatasourceFactoryDto';
    return $f;
  });
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.CsvDatasourceFactoryDto.params = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "Magma.CsvDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\CsvDatasourceFactoryDto';
    return $f;
  });
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.FsDatasourceFactoryDto.params = 1002
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1002;
    $f->name      = "Magma.FsDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\FsDatasourceFactoryDto';
    return $f;
  });
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.JdbcDatasourceFactoryDto.params = 1003
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1003;
    $f->name      = "Magma.JdbcDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\JdbcDatasourceFactoryDto';
    return $f;
  });
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.HibernateDatasourceFactoryDto.params = 1004
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1004;
    $f->name      = "Magma.HibernateDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\HibernateDatasourceFactoryDto';
    return $f;
  });
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.LimesurveyDatasourceFactoryDto.params = 1005
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1005;
    $f->name      = "Magma.LimesurveyDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\LimesurveyDatasourceFactoryDto';
    return $f;
  });
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.StaticDatasourceFactoryDto.params = 1006
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1006;
    $f->name      = "Magma.StaticDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\StaticDatasourceFactoryDto';
    return $f;
  });
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.RestDatasourceFactoryDto.params = 1007
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1007;
    $f->name      = "Magma.RestDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\RestDatasourceFactoryDto';
    return $f;
  });
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.IncrementalDatasourceFactoryDto.params = 1008
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1008;
    $f->name      = "Magma.IncrementalDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\IncrementalDatasourceFactoryDto';
    return $f;
  });
  \Magma\DatasourceFactoryDto::extension(function(){
      // OPTIONAL MESSAGE Magma.SpssDatasourceFactoryDto.params = 1009
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1009;
    $f->name      = "Magma.SpssDatasourceFactoryDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\SpssDatasourceFactoryDto';
    return $f;
  });
  \Ws\ClientErrorDto::extension(function(){
      // REPEATED MESSAGE Magma.DatasourceParsingErrorDto.errors = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "Magma.DatasourceParsingErrorDto.errors";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
    $f->reference = '\Magma\DatasourceParsingErrorDto';
    return $f;
  });
  \Ws\ClientErrorDto::extension(function(){
      // REPEATED MESSAGE Magma.JavaScriptErrorDto.errors = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "Magma.JavaScriptErrorDto.errors";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
    $f->reference = '\Magma\JavaScriptErrorDto';
    return $f;
  });
  \Magma\ViewDto::extension(function(){
      // OPTIONAL MESSAGE Magma.JavaScriptViewDto.view = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "Magma.JavaScriptViewDto.view";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\JavaScriptViewDto';
    return $f;
  });
  \Magma\ViewDto::extension(function(){
      // OPTIONAL MESSAGE Magma.VariableListViewDto.view = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "Magma.VariableListViewDto.view";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\VariableListViewDto';
    return $f;
  });
  \Magma\ViewDto::extension(function(){
      // OPTIONAL MESSAGE Magma.OutlierRemovingViewDto.view = 1002
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1002;
    $f->name      = "Magma.OutlierRemovingViewDto.view";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\OutlierRemovingViewDto';
    return $f;
  });
  \Magma\ViewDto::extension(function(){
      // OPTIONAL MESSAGE Magma.FileViewDto.view = 1003
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1003;
    $f->name      = "Magma.FileViewDto.view";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Magma\FileViewDto';
    return $f;
  });
}