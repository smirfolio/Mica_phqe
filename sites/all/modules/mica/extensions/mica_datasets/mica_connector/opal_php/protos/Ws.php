<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Ws.proto
//   Date: 2013-04-22 20:55:40

namespace Ws {

  class ClientErrorDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var string */
    public $status = null;
    
    /**  @var string[]  */
    public $arguments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Ws.ClientErrorDto');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING arguments = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "arguments";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \Ws\ClientErrorDto
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \Ws\ClientErrorDto
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \Ws\ClientErrorDto
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \Ws\ClientErrorDto
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <arguments> has a value
     *
     * @return boolean
     */
    public function hasArguments(){
      return $this->_has(3);
    }
    
    /**
     * Clear <arguments> value
     *
     * @return \Ws\ClientErrorDto
     */
    public function clearArguments(){
      return $this->_clear(3);
    }
    
    /**
     * Get <arguments> value
     *
     * @param int $idx
     * @return string
     */
    public function getArguments($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <arguments> value
     *
     * @param string $value
     * @return \Ws\ClientErrorDto
     */
    public function setArguments( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <arguments>
     *
     * @return string[]
     */
    public function getArgumentsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <arguments>
     *
     * @param string $value
     * @return \Ws\ClientErrorDto
     */
    public function addArguments( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Ws {

  class ServerErrorDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var string */
    public $status = null;
    
    /**  @var string[]  */
    public $arguments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Ws.ServerErrorDto');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING arguments = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "arguments";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \Ws\ServerErrorDto
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \Ws\ServerErrorDto
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \Ws\ServerErrorDto
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \Ws\ServerErrorDto
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <arguments> has a value
     *
     * @return boolean
     */
    public function hasArguments(){
      return $this->_has(3);
    }
    
    /**
     * Clear <arguments> value
     *
     * @return \Ws\ServerErrorDto
     */
    public function clearArguments(){
      return $this->_clear(3);
    }
    
    /**
     * Get <arguments> value
     *
     * @param int $idx
     * @return string
     */
    public function getArguments($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <arguments> value
     *
     * @param string $value
     * @return \Ws\ServerErrorDto
     */
    public function setArguments( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <arguments>
     *
     * @return string[]
     */
    public function getArgumentsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <arguments>
     *
     * @param string $value
     * @return \Ws\ServerErrorDto
     */
    public function addArguments( $value){
     return $this->_add(3, $value);
    }
  }
}

