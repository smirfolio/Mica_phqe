<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Math.proto
//   Date: 2013-04-22 20:55:40

namespace Math {

  class SummaryStatisticsDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $resource = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Math.SummaryStatisticsDto');

      // REQUIRED STRING resource = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "resource";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <resource> has a value
     *
     * @return boolean
     */
    public function hasResource(){
      return $this->_has(1);
    }
    
    /**
     * Clear <resource> value
     *
     * @return \Math\SummaryStatisticsDto
     */
    public function clearResource(){
      return $this->_clear(1);
    }
    
    /**
     * Get <resource> value
     *
     * @return string
     */
    public function getResource(){
      return $this->_get(1);
    }
    
    /**
     * Set <resource> value
     *
     * @param string $value
     * @return \Math\SummaryStatisticsDto
     */
    public function setResource( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace Math {

  class CategoricalSummaryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $mode = null;
    
    /**  @var int */
    public $n = null;
    
    /**  @var \Math\FrequencyDto[]  */
    public $frequencies = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Math.CategoricalSummaryDto');

      // REQUIRED STRING mode = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "mode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 n = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "n";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE frequencies = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "frequencies";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Math\FrequencyDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <mode> has a value
     *
     * @return boolean
     */
    public function hasMode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <mode> value
     *
     * @return \Math\CategoricalSummaryDto
     */
    public function clearMode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <mode> value
     *
     * @return string
     */
    public function getMode(){
      return $this->_get(1);
    }
    
    /**
     * Set <mode> value
     *
     * @param string $value
     * @return \Math\CategoricalSummaryDto
     */
    public function setMode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <n> has a value
     *
     * @return boolean
     */
    public function hasN(){
      return $this->_has(2);
    }
    
    /**
     * Clear <n> value
     *
     * @return \Math\CategoricalSummaryDto
     */
    public function clearN(){
      return $this->_clear(2);
    }
    
    /**
     * Get <n> value
     *
     * @return int
     */
    public function getN(){
      return $this->_get(2);
    }
    
    /**
     * Set <n> value
     *
     * @param int $value
     * @return \Math\CategoricalSummaryDto
     */
    public function setN( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <frequencies> has a value
     *
     * @return boolean
     */
    public function hasFrequencies(){
      return $this->_has(3);
    }
    
    /**
     * Clear <frequencies> value
     *
     * @return \Math\CategoricalSummaryDto
     */
    public function clearFrequencies(){
      return $this->_clear(3);
    }
    
    /**
     * Get <frequencies> value
     *
     * @param int $idx
     * @return \Math\FrequencyDto
     */
    public function getFrequencies($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <frequencies> value
     *
     * @param \Math\FrequencyDto $value
     * @return \Math\CategoricalSummaryDto
     */
    public function setFrequencies(\Math\FrequencyDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <frequencies>
     *
     * @return \Math\FrequencyDto[]
     */
    public function getFrequenciesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <frequencies>
     *
     * @param \Math\FrequencyDto $value
     * @return \Math\CategoricalSummaryDto
     */
    public function addFrequencies(\Math\FrequencyDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Math {

  class ContinuousSummaryDto extends \DrSlump\Protobuf\Message {

    /**  @var \Math\DescriptiveStatsDto */
    public $summary = null;
    
    /**  @var float[]  */
    public $distributionPercentiles = array();
    
    /**  @var \Math\IntervalFrequencyDto[]  */
    public $intervalFrequency = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Math.ContinuousSummaryDto');

      // REQUIRED MESSAGE summary = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "summary";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Math\DescriptiveStatsDto';
      $descriptor->addField($f);

      // REPEATED DOUBLE distributionPercentiles = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "distributionPercentiles";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE intervalFrequency = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "intervalFrequency";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Math\IntervalFrequencyDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <summary> has a value
     *
     * @return boolean
     */
    public function hasSummary(){
      return $this->_has(1);
    }
    
    /**
     * Clear <summary> value
     *
     * @return \Math\ContinuousSummaryDto
     */
    public function clearSummary(){
      return $this->_clear(1);
    }
    
    /**
     * Get <summary> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function getSummary(){
      return $this->_get(1);
    }
    
    /**
     * Set <summary> value
     *
     * @param \Math\DescriptiveStatsDto $value
     * @return \Math\ContinuousSummaryDto
     */
    public function setSummary(\Math\DescriptiveStatsDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <distributionPercentiles> has a value
     *
     * @return boolean
     */
    public function hasDistributionPercentiles(){
      return $this->_has(2);
    }
    
    /**
     * Clear <distributionPercentiles> value
     *
     * @return \Math\ContinuousSummaryDto
     */
    public function clearDistributionPercentiles(){
      return $this->_clear(2);
    }
    
    /**
     * Get <distributionPercentiles> value
     *
     * @param int $idx
     * @return float
     */
    public function getDistributionPercentiles($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <distributionPercentiles> value
     *
     * @param float $value
     * @return \Math\ContinuousSummaryDto
     */
    public function setDistributionPercentiles( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <distributionPercentiles>
     *
     * @return float[]
     */
    public function getDistributionPercentilesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <distributionPercentiles>
     *
     * @param float $value
     * @return \Math\ContinuousSummaryDto
     */
    public function addDistributionPercentiles( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <intervalFrequency> has a value
     *
     * @return boolean
     */
    public function hasIntervalFrequency(){
      return $this->_has(3);
    }
    
    /**
     * Clear <intervalFrequency> value
     *
     * @return \Math\ContinuousSummaryDto
     */
    public function clearIntervalFrequency(){
      return $this->_clear(3);
    }
    
    /**
     * Get <intervalFrequency> value
     *
     * @param int $idx
     * @return \Math\IntervalFrequencyDto
     */
    public function getIntervalFrequency($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <intervalFrequency> value
     *
     * @param \Math\IntervalFrequencyDto $value
     * @return \Math\ContinuousSummaryDto
     */
    public function setIntervalFrequency(\Math\IntervalFrequencyDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <intervalFrequency>
     *
     * @return \Math\IntervalFrequencyDto[]
     */
    public function getIntervalFrequencyList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <intervalFrequency>
     *
     * @param \Math\IntervalFrequencyDto $value
     * @return \Math\ContinuousSummaryDto
     */
    public function addIntervalFrequency(\Math\IntervalFrequencyDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Math {

  class FrequencyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $value = null;
    
    /**  @var int */
    public $freq = null;
    
    /**  @var float */
    public $pct = null;
    
    /**  @var int */
    public $cummFreq = null;
    
    /**  @var float */
    public $cummPct = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Math.FrequencyDto');

      // REQUIRED STRING value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 freq = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "freq";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE pct = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pct";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT64 cummFreq = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cummFreq";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE cummPct = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cummPct";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Math\FrequencyDto
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Math\FrequencyDto
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <freq> has a value
     *
     * @return boolean
     */
    public function hasFreq(){
      return $this->_has(2);
    }
    
    /**
     * Clear <freq> value
     *
     * @return \Math\FrequencyDto
     */
    public function clearFreq(){
      return $this->_clear(2);
    }
    
    /**
     * Get <freq> value
     *
     * @return int
     */
    public function getFreq(){
      return $this->_get(2);
    }
    
    /**
     * Set <freq> value
     *
     * @param int $value
     * @return \Math\FrequencyDto
     */
    public function setFreq( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pct> has a value
     *
     * @return boolean
     */
    public function hasPct(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pct> value
     *
     * @return \Math\FrequencyDto
     */
    public function clearPct(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pct> value
     *
     * @return float
     */
    public function getPct(){
      return $this->_get(3);
    }
    
    /**
     * Set <pct> value
     *
     * @param float $value
     * @return \Math\FrequencyDto
     */
    public function setPct( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cummFreq> has a value
     *
     * @return boolean
     */
    public function hasCummFreq(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cummFreq> value
     *
     * @return \Math\FrequencyDto
     */
    public function clearCummFreq(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cummFreq> value
     *
     * @return int
     */
    public function getCummFreq(){
      return $this->_get(4);
    }
    
    /**
     * Set <cummFreq> value
     *
     * @param int $value
     * @return \Math\FrequencyDto
     */
    public function setCummFreq( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <cummPct> has a value
     *
     * @return boolean
     */
    public function hasCummPct(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cummPct> value
     *
     * @return \Math\FrequencyDto
     */
    public function clearCummPct(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cummPct> value
     *
     * @return float
     */
    public function getCummPct(){
      return $this->_get(5);
    }
    
    /**
     * Set <cummPct> value
     *
     * @param float $value
     * @return \Math\FrequencyDto
     */
    public function setCummPct( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace Math {

  class IntervalFrequencyDto extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $lower = null;
    
    /**  @var float */
    public $upper = null;
    
    /**  @var int */
    public $freq = null;
    
    /**  @var float */
    public $density = null;
    
    /**  @var float */
    public $densityPct = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Math.IntervalFrequencyDto');

      // REQUIRED DOUBLE lower = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lower";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE upper = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "upper";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 freq = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "freq";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE density = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "density";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE densityPct = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "densityPct";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lower> has a value
     *
     * @return boolean
     */
    public function hasLower(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lower> value
     *
     * @return \Math\IntervalFrequencyDto
     */
    public function clearLower(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lower> value
     *
     * @return float
     */
    public function getLower(){
      return $this->_get(1);
    }
    
    /**
     * Set <lower> value
     *
     * @param float $value
     * @return \Math\IntervalFrequencyDto
     */
    public function setLower( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <upper> has a value
     *
     * @return boolean
     */
    public function hasUpper(){
      return $this->_has(2);
    }
    
    /**
     * Clear <upper> value
     *
     * @return \Math\IntervalFrequencyDto
     */
    public function clearUpper(){
      return $this->_clear(2);
    }
    
    /**
     * Get <upper> value
     *
     * @return float
     */
    public function getUpper(){
      return $this->_get(2);
    }
    
    /**
     * Set <upper> value
     *
     * @param float $value
     * @return \Math\IntervalFrequencyDto
     */
    public function setUpper( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <freq> has a value
     *
     * @return boolean
     */
    public function hasFreq(){
      return $this->_has(3);
    }
    
    /**
     * Clear <freq> value
     *
     * @return \Math\IntervalFrequencyDto
     */
    public function clearFreq(){
      return $this->_clear(3);
    }
    
    /**
     * Get <freq> value
     *
     * @return int
     */
    public function getFreq(){
      return $this->_get(3);
    }
    
    /**
     * Set <freq> value
     *
     * @param int $value
     * @return \Math\IntervalFrequencyDto
     */
    public function setFreq( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <density> has a value
     *
     * @return boolean
     */
    public function hasDensity(){
      return $this->_has(4);
    }
    
    /**
     * Clear <density> value
     *
     * @return \Math\IntervalFrequencyDto
     */
    public function clearDensity(){
      return $this->_clear(4);
    }
    
    /**
     * Get <density> value
     *
     * @return float
     */
    public function getDensity(){
      return $this->_get(4);
    }
    
    /**
     * Set <density> value
     *
     * @param float $value
     * @return \Math\IntervalFrequencyDto
     */
    public function setDensity( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <densityPct> has a value
     *
     * @return boolean
     */
    public function hasDensityPct(){
      return $this->_has(5);
    }
    
    /**
     * Clear <densityPct> value
     *
     * @return \Math\IntervalFrequencyDto
     */
    public function clearDensityPct(){
      return $this->_clear(5);
    }
    
    /**
     * Get <densityPct> value
     *
     * @return float
     */
    public function getDensityPct(){
      return $this->_get(5);
    }
    
    /**
     * Set <densityPct> value
     *
     * @param float $value
     * @return \Math\IntervalFrequencyDto
     */
    public function setDensityPct( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace Math {

  class DescriptiveStatsDto extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $min = null;
    
    /**  @var float */
    public $max = null;
    
    /**  @var float */
    public $mean = null;
    
    /**  @var float */
    public $geometricMean = null;
    
    /**  @var int */
    public $n = null;
    
    /**  @var float */
    public $sum = null;
    
    /**  @var float */
    public $sumsq = null;
    
    /**  @var float */
    public $stdDev = null;
    
    /**  @var float */
    public $variance = null;
    
    /**  @var float[]  */
    public $percentiles = array();
    
    /**  @var float */
    public $skewness = null;
    
    /**  @var float */
    public $kurtosis = null;
    
    /**  @var float */
    public $median = null;
    
    /**  @var float[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Math.DescriptiveStatsDto');

      // OPTIONAL DOUBLE min = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "min";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE max = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "max";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE mean = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mean";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE geometricMean = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "geometricMean";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 n = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "n";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE sum = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sum";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE sumsq = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "sumsq";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE stdDev = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "stdDev";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE variance = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "variance";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED DOUBLE percentiles = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "percentiles";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE skewness = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "skewness";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE kurtosis = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "kurtosis";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE median = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "median";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED DOUBLE values = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <min> has a value
     *
     * @return boolean
     */
    public function hasMin(){
      return $this->_has(1);
    }
    
    /**
     * Clear <min> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearMin(){
      return $this->_clear(1);
    }
    
    /**
     * Get <min> value
     *
     * @return float
     */
    public function getMin(){
      return $this->_get(1);
    }
    
    /**
     * Set <min> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setMin( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <max> has a value
     *
     * @return boolean
     */
    public function hasMax(){
      return $this->_has(2);
    }
    
    /**
     * Clear <max> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearMax(){
      return $this->_clear(2);
    }
    
    /**
     * Get <max> value
     *
     * @return float
     */
    public function getMax(){
      return $this->_get(2);
    }
    
    /**
     * Set <max> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setMax( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mean> has a value
     *
     * @return boolean
     */
    public function hasMean(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mean> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearMean(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mean> value
     *
     * @return float
     */
    public function getMean(){
      return $this->_get(3);
    }
    
    /**
     * Set <mean> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setMean( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <geometricMean> has a value
     *
     * @return boolean
     */
    public function hasGeometricMean(){
      return $this->_has(4);
    }
    
    /**
     * Clear <geometricMean> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearGeometricMean(){
      return $this->_clear(4);
    }
    
    /**
     * Get <geometricMean> value
     *
     * @return float
     */
    public function getGeometricMean(){
      return $this->_get(4);
    }
    
    /**
     * Set <geometricMean> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setGeometricMean( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <n> has a value
     *
     * @return boolean
     */
    public function hasN(){
      return $this->_has(5);
    }
    
    /**
     * Clear <n> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearN(){
      return $this->_clear(5);
    }
    
    /**
     * Get <n> value
     *
     * @return int
     */
    public function getN(){
      return $this->_get(5);
    }
    
    /**
     * Set <n> value
     *
     * @param int $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setN( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sum> has a value
     *
     * @return boolean
     */
    public function hasSum(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sum> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearSum(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sum> value
     *
     * @return float
     */
    public function getSum(){
      return $this->_get(6);
    }
    
    /**
     * Set <sum> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setSum( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <sumsq> has a value
     *
     * @return boolean
     */
    public function hasSumsq(){
      return $this->_has(7);
    }
    
    /**
     * Clear <sumsq> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearSumsq(){
      return $this->_clear(7);
    }
    
    /**
     * Get <sumsq> value
     *
     * @return float
     */
    public function getSumsq(){
      return $this->_get(7);
    }
    
    /**
     * Set <sumsq> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setSumsq( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <stdDev> has a value
     *
     * @return boolean
     */
    public function hasStdDev(){
      return $this->_has(8);
    }
    
    /**
     * Clear <stdDev> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearStdDev(){
      return $this->_clear(8);
    }
    
    /**
     * Get <stdDev> value
     *
     * @return float
     */
    public function getStdDev(){
      return $this->_get(8);
    }
    
    /**
     * Set <stdDev> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setStdDev( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <variance> has a value
     *
     * @return boolean
     */
    public function hasVariance(){
      return $this->_has(9);
    }
    
    /**
     * Clear <variance> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearVariance(){
      return $this->_clear(9);
    }
    
    /**
     * Get <variance> value
     *
     * @return float
     */
    public function getVariance(){
      return $this->_get(9);
    }
    
    /**
     * Set <variance> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setVariance( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <percentiles> has a value
     *
     * @return boolean
     */
    public function hasPercentiles(){
      return $this->_has(10);
    }
    
    /**
     * Clear <percentiles> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearPercentiles(){
      return $this->_clear(10);
    }
    
    /**
     * Get <percentiles> value
     *
     * @param int $idx
     * @return float
     */
    public function getPercentiles($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <percentiles> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setPercentiles( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <percentiles>
     *
     * @return float[]
     */
    public function getPercentilesList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <percentiles>
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function addPercentiles( $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <skewness> has a value
     *
     * @return boolean
     */
    public function hasSkewness(){
      return $this->_has(11);
    }
    
    /**
     * Clear <skewness> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearSkewness(){
      return $this->_clear(11);
    }
    
    /**
     * Get <skewness> value
     *
     * @return float
     */
    public function getSkewness(){
      return $this->_get(11);
    }
    
    /**
     * Set <skewness> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setSkewness( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <kurtosis> has a value
     *
     * @return boolean
     */
    public function hasKurtosis(){
      return $this->_has(12);
    }
    
    /**
     * Clear <kurtosis> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearKurtosis(){
      return $this->_clear(12);
    }
    
    /**
     * Get <kurtosis> value
     *
     * @return float
     */
    public function getKurtosis(){
      return $this->_get(12);
    }
    
    /**
     * Set <kurtosis> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setKurtosis( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <median> has a value
     *
     * @return boolean
     */
    public function hasMedian(){
      return $this->_has(13);
    }
    
    /**
     * Clear <median> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearMedian(){
      return $this->_clear(13);
    }
    
    /**
     * Get <median> value
     *
     * @return float
     */
    public function getMedian(){
      return $this->_get(13);
    }
    
    /**
     * Set <median> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setMedian( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(14);
    }
    
    /**
     * Clear <values> value
     *
     * @return \Math\DescriptiveStatsDto
     */
    public function clearValues(){
      return $this->_clear(14);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return float
     */
    public function getValues($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function setValues( $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return float[]
     */
    public function getValuesList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param float $value
     * @return \Math\DescriptiveStatsDto
     */
    public function addValues( $value){
     return $this->_add(14, $value);
    }
  }
}

namespace {
  \Math\SummaryStatisticsDto::extension(function(){
      // OPTIONAL MESSAGE Math.CategoricalSummaryDto.categorical = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "Math.CategoricalSummaryDto.categorical";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Math\CategoricalSummaryDto';
    return $f;
  });
  \Math\SummaryStatisticsDto::extension(function(){
      // OPTIONAL MESSAGE Math.ContinuousSummaryDto.continuous = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "Math.ContinuousSummaryDto.continuous";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Math\ContinuousSummaryDto';
    return $f;
  });
}