<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Opal.proto
//   Date: 2013-04-22 20:55:40

namespace Opal {

  class KeyType extends \DrSlump\Protobuf\Enum {
    const KEY_PAIR = 0;
    const CERTIFICATE = 1;
  }
}
namespace Opal {

  class AclAction extends \DrSlump\Protobuf\Enum {
    const DATASOURCE_ALL = 0;
    const CREATE_TABLE = 1;
    const CREATE_VIEW = 2;
    const TABLE_ALL = 3;
    const TABLE_READ = 4;
    const TABLE_VALUES = 5;
    const TABLE_EDIT = 6;
    const VIEW_ALL = 7;
    const VIEW_READ = 8;
    const VIEW_VALUES = 9;
    const VIEW_EDIT = 10;
    const VIEW_VALUES_EDIT = 11;
    const VARIABLE_READ = 12;
    const DATABASES_ALL = 13;
    const R_SESSION_ALL = 14;
    const DATASHIELD_ALL = 15;
    const DATASHIELD_SESSION_ALL = 16;
    const FILES_ALL = 18;
    const FILES_READ = 19;
    const FILES_SHARE = 20;
    const REPORT_TEMPLATE_ALL = 21;
    const REPORT_TEMPLATE_READ = 22;
  }
}
namespace Opal {

  class ServiceStatus extends \DrSlump\Protobuf\Enum {
    const RUNNING = 1;
    const STOPPED = 2;
  }
}
namespace Opal {

  class TableIndexationStatus extends \DrSlump\Protobuf\Enum {
    const NOT_INDEXED = 1;
    const OUTDATED = 2;
    const IN_PROGRESS = 3;
    const UPTODATE = 4;
  }
}
namespace Opal {

  class ScheduleType extends \DrSlump\Protobuf\Enum {
    const NOT_SCHEDULED = 1;
    const MINUTES_5 = 2;
    const MINUTES_15 = 3;
    const MINUTES_30 = 4;
    const HOURLY = 5;
    const DAILY = 6;
    const WEEKLY = 7;
  }
}
namespace Opal {

  class Day extends \DrSlump\Protobuf\Enum {
    const SUNDAY = 1;
    const MONDAY = 2;
    const TUESDAY = 3;
    const WEDNESDAY = 4;
    const THURSDAY = 5;
    const FRIDAY = 6;
    const SATURDAY = 7;
  }
}
namespace Opal {

  class FunctionalUnitDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $keyVariableName = null;
    
    /**  @var string */
    public $select = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.FunctionalUnitDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING keyVariableName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "keyVariableName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING select = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "select";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Opal\FunctionalUnitDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\FunctionalUnitDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <keyVariableName> has a value
     *
     * @return boolean
     */
    public function hasKeyVariableName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <keyVariableName> value
     *
     * @return \Opal\FunctionalUnitDto
     */
    public function clearKeyVariableName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <keyVariableName> value
     *
     * @return string
     */
    public function getKeyVariableName(){
      return $this->_get(2);
    }
    
    /**
     * Set <keyVariableName> value
     *
     * @param string $value
     * @return \Opal\FunctionalUnitDto
     */
    public function setKeyVariableName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <select> has a value
     *
     * @return boolean
     */
    public function hasSelect(){
      return $this->_has(3);
    }
    
    /**
     * Clear <select> value
     *
     * @return \Opal\FunctionalUnitDto
     */
    public function clearSelect(){
      return $this->_clear(3);
    }
    
    /**
     * Get <select> value
     *
     * @return string
     */
    public function getSelect(){
      return $this->_get(3);
    }
    
    /**
     * Set <select> value
     *
     * @param string $value
     * @return \Opal\FunctionalUnitDto
     */
    public function setSelect( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(4);
    }
    
    /**
     * Clear <description> value
     *
     * @return \Opal\FunctionalUnitDto
     */
    public function clearDescription(){
      return $this->_clear(4);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(4);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \Opal\FunctionalUnitDto
     */
    public function setDescription( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace Opal {

  class KeyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $alias = null;
    
    /**  @var string */
    public $certificate = null;
    
    /**  @var int - \Opal\KeyType */
    public $keyType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.KeyDto');

      // REQUIRED STRING alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "alias";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING certificate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "certificate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM keyType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "keyType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\KeyType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <alias> has a value
     *
     * @return boolean
     */
    public function hasAlias(){
      return $this->_has(1);
    }
    
    /**
     * Clear <alias> value
     *
     * @return \Opal\KeyDto
     */
    public function clearAlias(){
      return $this->_clear(1);
    }
    
    /**
     * Get <alias> value
     *
     * @return string
     */
    public function getAlias(){
      return $this->_get(1);
    }
    
    /**
     * Set <alias> value
     *
     * @param string $value
     * @return \Opal\KeyDto
     */
    public function setAlias( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <certificate> has a value
     *
     * @return boolean
     */
    public function hasCertificate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <certificate> value
     *
     * @return \Opal\KeyDto
     */
    public function clearCertificate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <certificate> value
     *
     * @return string
     */
    public function getCertificate(){
      return $this->_get(2);
    }
    
    /**
     * Set <certificate> value
     *
     * @param string $value
     * @return \Opal\KeyDto
     */
    public function setCertificate( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <keyType> has a value
     *
     * @return boolean
     */
    public function hasKeyType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <keyType> value
     *
     * @return \Opal\KeyDto
     */
    public function clearKeyType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <keyType> value
     *
     * @return int - \Opal\KeyType
     */
    public function getKeyType(){
      return $this->_get(3);
    }
    
    /**
     * Set <keyType> value
     *
     * @param int - \Opal\KeyType $value
     * @return \Opal\KeyDto
     */
    public function setKeyType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Opal {

  class KeyForm extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $alias = null;
    
    /**  @var \Opal\PrivateKeyForm */
    public $privateForm = null;
    
    /**  @var string */
    public $privateImport = null;
    
    /**  @var \Opal\PublicKeyForm */
    public $publicForm = null;
    
    /**  @var string */
    public $publicImport = null;
    
    /**  @var string */
    public $certificateFile = null;
    
    /**  @var int - \Opal\KeyType */
    public $keyType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.KeyForm');

      // REQUIRED STRING alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "alias";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE privateForm = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "privateForm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Opal\PrivateKeyForm';
      $descriptor->addField($f);

      // OPTIONAL STRING privateImport = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "privateImport";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE publicForm = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "publicForm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Opal\PublicKeyForm';
      $descriptor->addField($f);

      // OPTIONAL STRING publicImport = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "publicImport";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING certificateFile = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "certificateFile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED ENUM keyType = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "keyType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\KeyType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <alias> has a value
     *
     * @return boolean
     */
    public function hasAlias(){
      return $this->_has(1);
    }
    
    /**
     * Clear <alias> value
     *
     * @return \Opal\KeyForm
     */
    public function clearAlias(){
      return $this->_clear(1);
    }
    
    /**
     * Get <alias> value
     *
     * @return string
     */
    public function getAlias(){
      return $this->_get(1);
    }
    
    /**
     * Set <alias> value
     *
     * @param string $value
     * @return \Opal\KeyForm
     */
    public function setAlias( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <privateForm> has a value
     *
     * @return boolean
     */
    public function hasPrivateForm(){
      return $this->_has(2);
    }
    
    /**
     * Clear <privateForm> value
     *
     * @return \Opal\KeyForm
     */
    public function clearPrivateForm(){
      return $this->_clear(2);
    }
    
    /**
     * Get <privateForm> value
     *
     * @return \Opal\PrivateKeyForm
     */
    public function getPrivateForm(){
      return $this->_get(2);
    }
    
    /**
     * Set <privateForm> value
     *
     * @param \Opal\PrivateKeyForm $value
     * @return \Opal\KeyForm
     */
    public function setPrivateForm(\Opal\PrivateKeyForm $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <privateImport> has a value
     *
     * @return boolean
     */
    public function hasPrivateImport(){
      return $this->_has(3);
    }
    
    /**
     * Clear <privateImport> value
     *
     * @return \Opal\KeyForm
     */
    public function clearPrivateImport(){
      return $this->_clear(3);
    }
    
    /**
     * Get <privateImport> value
     *
     * @return string
     */
    public function getPrivateImport(){
      return $this->_get(3);
    }
    
    /**
     * Set <privateImport> value
     *
     * @param string $value
     * @return \Opal\KeyForm
     */
    public function setPrivateImport( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <publicForm> has a value
     *
     * @return boolean
     */
    public function hasPublicForm(){
      return $this->_has(4);
    }
    
    /**
     * Clear <publicForm> value
     *
     * @return \Opal\KeyForm
     */
    public function clearPublicForm(){
      return $this->_clear(4);
    }
    
    /**
     * Get <publicForm> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function getPublicForm(){
      return $this->_get(4);
    }
    
    /**
     * Set <publicForm> value
     *
     * @param \Opal\PublicKeyForm $value
     * @return \Opal\KeyForm
     */
    public function setPublicForm(\Opal\PublicKeyForm $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <publicImport> has a value
     *
     * @return boolean
     */
    public function hasPublicImport(){
      return $this->_has(5);
    }
    
    /**
     * Clear <publicImport> value
     *
     * @return \Opal\KeyForm
     */
    public function clearPublicImport(){
      return $this->_clear(5);
    }
    
    /**
     * Get <publicImport> value
     *
     * @return string
     */
    public function getPublicImport(){
      return $this->_get(5);
    }
    
    /**
     * Set <publicImport> value
     *
     * @param string $value
     * @return \Opal\KeyForm
     */
    public function setPublicImport( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <certificateFile> has a value
     *
     * @return boolean
     */
    public function hasCertificateFile(){
      return $this->_has(6);
    }
    
    /**
     * Clear <certificateFile> value
     *
     * @return \Opal\KeyForm
     */
    public function clearCertificateFile(){
      return $this->_clear(6);
    }
    
    /**
     * Get <certificateFile> value
     *
     * @return string
     */
    public function getCertificateFile(){
      return $this->_get(6);
    }
    
    /**
     * Set <certificateFile> value
     *
     * @param string $value
     * @return \Opal\KeyForm
     */
    public function setCertificateFile( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <keyType> has a value
     *
     * @return boolean
     */
    public function hasKeyType(){
      return $this->_has(7);
    }
    
    /**
     * Clear <keyType> value
     *
     * @return \Opal\KeyForm
     */
    public function clearKeyType(){
      return $this->_clear(7);
    }
    
    /**
     * Get <keyType> value
     *
     * @return int - \Opal\KeyType
     */
    public function getKeyType(){
      return $this->_get(7);
    }
    
    /**
     * Set <keyType> value
     *
     * @param int - \Opal\KeyType $value
     * @return \Opal\KeyForm
     */
    public function setKeyType( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace Opal {

  class PrivateKeyForm extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $algo = null;
    
    /**  @var int */
    public $size = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.PrivateKeyForm');

      // REQUIRED STRING algo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "algo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <algo> has a value
     *
     * @return boolean
     */
    public function hasAlgo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <algo> value
     *
     * @return \Opal\PrivateKeyForm
     */
    public function clearAlgo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <algo> value
     *
     * @return string
     */
    public function getAlgo(){
      return $this->_get(1);
    }
    
    /**
     * Set <algo> value
     *
     * @param string $value
     * @return \Opal\PrivateKeyForm
     */
    public function setAlgo( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <size> value
     *
     * @return \Opal\PrivateKeyForm
     */
    public function clearSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \Opal\PrivateKeyForm
     */
    public function setSize( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Opal {

  class PublicKeyForm extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $organizationalUnit = null;
    
    /**  @var string */
    public $organization = null;
    
    /**  @var string */
    public $locality = null;
    
    /**  @var string */
    public $state = null;
    
    /**  @var string */
    public $country = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.PublicKeyForm');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING organizationalUnit = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "organizationalUnit";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING organization = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "organization";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING locality = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "locality";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING state = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING country = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "country";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <organizationalUnit> has a value
     *
     * @return boolean
     */
    public function hasOrganizationalUnit(){
      return $this->_has(2);
    }
    
    /**
     * Clear <organizationalUnit> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearOrganizationalUnit(){
      return $this->_clear(2);
    }
    
    /**
     * Get <organizationalUnit> value
     *
     * @return string
     */
    public function getOrganizationalUnit(){
      return $this->_get(2);
    }
    
    /**
     * Set <organizationalUnit> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setOrganizationalUnit( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <organization> has a value
     *
     * @return boolean
     */
    public function hasOrganization(){
      return $this->_has(3);
    }
    
    /**
     * Clear <organization> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearOrganization(){
      return $this->_clear(3);
    }
    
    /**
     * Get <organization> value
     *
     * @return string
     */
    public function getOrganization(){
      return $this->_get(3);
    }
    
    /**
     * Set <organization> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setOrganization( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <locality> has a value
     *
     * @return boolean
     */
    public function hasLocality(){
      return $this->_has(4);
    }
    
    /**
     * Clear <locality> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearLocality(){
      return $this->_clear(4);
    }
    
    /**
     * Get <locality> value
     *
     * @return string
     */
    public function getLocality(){
      return $this->_get(4);
    }
    
    /**
     * Set <locality> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setLocality( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(5);
    }
    
    /**
     * Clear <state> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearState(){
      return $this->_clear(5);
    }
    
    /**
     * Get <state> value
     *
     * @return string
     */
    public function getState(){
      return $this->_get(5);
    }
    
    /**
     * Set <state> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setState( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <country> has a value
     *
     * @return boolean
     */
    public function hasCountry(){
      return $this->_has(6);
    }
    
    /**
     * Clear <country> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearCountry(){
      return $this->_clear(6);
    }
    
    /**
     * Get <country> value
     *
     * @return string
     */
    public function getCountry(){
      return $this->_get(6);
    }
    
    /**
     * Set <country> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setCountry( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace Opal\FileDto {

  class FileType extends \DrSlump\Protobuf\Enum {
    const FILE = 0;
    const FOLDER = 1;
  }
}
namespace Opal {

  class FileDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $path = null;
    
    /**  @var int - \Opal\FileDto\FileType */
    public $type = null;
    
    /**  @var \Opal\FileDto[]  */
    public $children = array();
    
    /**  @var int */
    public $size = null;
    
    /**  @var int */
    public $lastModifiedTime = null;
    
    /**  @var boolean */
    public $readable = null;
    
    /**  @var boolean */
    public $writable = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.FileDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\FileDto\FileType';
      $descriptor->addField($f);

      // REPEATED MESSAGE children = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "children";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\FileDto';
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 lastModifiedTime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "lastModifiedTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED BOOL readable = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "readable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL writable = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "writable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Opal\FileDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\FileDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(2);
    }
    
    /**
     * Clear <path> value
     *
     * @return \Opal\FileDto
     */
    public function clearPath(){
      return $this->_clear(2);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(2);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \Opal\FileDto
     */
    public function setPath( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \Opal\FileDto
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \Opal\FileDto\FileType
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \Opal\FileDto\FileType $value
     * @return \Opal\FileDto
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <children> has a value
     *
     * @return boolean
     */
    public function hasChildren(){
      return $this->_has(4);
    }
    
    /**
     * Clear <children> value
     *
     * @return \Opal\FileDto
     */
    public function clearChildren(){
      return $this->_clear(4);
    }
    
    /**
     * Get <children> value
     *
     * @param int $idx
     * @return \Opal\FileDto
     */
    public function getChildren($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <children> value
     *
     * @param \Opal\FileDto $value
     * @return \Opal\FileDto
     */
    public function setChildren(\Opal\FileDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <children>
     *
     * @return \Opal\FileDto[]
     */
    public function getChildrenList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <children>
     *
     * @param \Opal\FileDto $value
     * @return \Opal\FileDto
     */
    public function addChildren(\Opal\FileDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(5);
    }
    
    /**
     * Clear <size> value
     *
     * @return \Opal\FileDto
     */
    public function clearSize(){
      return $this->_clear(5);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(5);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \Opal\FileDto
     */
    public function setSize( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <lastModifiedTime> has a value
     *
     * @return boolean
     */
    public function hasLastModifiedTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <lastModifiedTime> value
     *
     * @return \Opal\FileDto
     */
    public function clearLastModifiedTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <lastModifiedTime> value
     *
     * @return int
     */
    public function getLastModifiedTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <lastModifiedTime> value
     *
     * @param int $value
     * @return \Opal\FileDto
     */
    public function setLastModifiedTime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <readable> has a value
     *
     * @return boolean
     */
    public function hasReadable(){
      return $this->_has(7);
    }
    
    /**
     * Clear <readable> value
     *
     * @return \Opal\FileDto
     */
    public function clearReadable(){
      return $this->_clear(7);
    }
    
    /**
     * Get <readable> value
     *
     * @return boolean
     */
    public function getReadable(){
      return $this->_get(7);
    }
    
    /**
     * Set <readable> value
     *
     * @param boolean $value
     * @return \Opal\FileDto
     */
    public function setReadable( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <writable> has a value
     *
     * @return boolean
     */
    public function hasWritable(){
      return $this->_has(8);
    }
    
    /**
     * Clear <writable> value
     *
     * @return \Opal\FileDto
     */
    public function clearWritable(){
      return $this->_clear(8);
    }
    
    /**
     * Get <writable> value
     *
     * @return boolean
     */
    public function getWritable(){
      return $this->_get(8);
    }
    
    /**
     * Set <writable> value
     *
     * @param boolean $value
     * @return \Opal\FileDto
     */
    public function setWritable( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace Opal {

  class LocaleDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $display = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.LocaleDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING display = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "display";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Opal\LocaleDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\LocaleDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <display> has a value
     *
     * @return boolean
     */
    public function hasDisplay(){
      return $this->_has(2);
    }
    
    /**
     * Clear <display> value
     *
     * @return \Opal\LocaleDto
     */
    public function clearDisplay(){
      return $this->_clear(2);
    }
    
    /**
     * Get <display> value
     *
     * @return string
     */
    public function getDisplay(){
      return $this->_get(2);
    }
    
    /**
     * Set <display> value
     *
     * @param string $value
     * @return \Opal\LocaleDto
     */
    public function setDisplay( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Opal {

  class JdbcDriverDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $driverName = null;
    
    /**  @var string */
    public $driverClass = null;
    
    /**  @var string */
    public $jdbcUrlTemplate = null;
    
    /**  @var string */
    public $version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.JdbcDriverDto');

      // REQUIRED STRING driverName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "driverName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING driverClass = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "driverClass";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING jdbcUrlTemplate = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "jdbcUrlTemplate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING version = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <driverName> has a value
     *
     * @return boolean
     */
    public function hasDriverName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <driverName> value
     *
     * @return \Opal\JdbcDriverDto
     */
    public function clearDriverName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <driverName> value
     *
     * @return string
     */
    public function getDriverName(){
      return $this->_get(1);
    }
    
    /**
     * Set <driverName> value
     *
     * @param string $value
     * @return \Opal\JdbcDriverDto
     */
    public function setDriverName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <driverClass> has a value
     *
     * @return boolean
     */
    public function hasDriverClass(){
      return $this->_has(2);
    }
    
    /**
     * Clear <driverClass> value
     *
     * @return \Opal\JdbcDriverDto
     */
    public function clearDriverClass(){
      return $this->_clear(2);
    }
    
    /**
     * Get <driverClass> value
     *
     * @return string
     */
    public function getDriverClass(){
      return $this->_get(2);
    }
    
    /**
     * Set <driverClass> value
     *
     * @param string $value
     * @return \Opal\JdbcDriverDto
     */
    public function setDriverClass( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <jdbcUrlTemplate> has a value
     *
     * @return boolean
     */
    public function hasJdbcUrlTemplate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <jdbcUrlTemplate> value
     *
     * @return \Opal\JdbcDriverDto
     */
    public function clearJdbcUrlTemplate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <jdbcUrlTemplate> value
     *
     * @return string
     */
    public function getJdbcUrlTemplate(){
      return $this->_get(3);
    }
    
    /**
     * Set <jdbcUrlTemplate> value
     *
     * @param string $value
     * @return \Opal\JdbcDriverDto
     */
    public function setJdbcUrlTemplate( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(4);
    }
    
    /**
     * Clear <version> value
     *
     * @return \Opal\JdbcDriverDto
     */
    public function clearVersion(){
      return $this->_clear(4);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(4);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \Opal\JdbcDriverDto
     */
    public function setVersion( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace Opal {

  class JdbcDataSourceDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $url = null;
    
    /**  @var string */
    public $driverClass = null;
    
    /**  @var string */
    public $username = null;
    
    /**  @var string */
    public $password = null;
    
    /**  @var boolean */
    public $editable = true;
    
    /**  @var string */
    public $properties = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.JdbcDataSourceDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING url = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING driverClass = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "driverClass";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING username = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING password = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "password";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL editable = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "editable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = true;
      $descriptor->addField($f);

      // OPTIONAL STRING properties = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "properties";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Opal\JdbcDataSourceDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\JdbcDataSourceDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <url> value
     *
     * @return \Opal\JdbcDataSourceDto
     */
    public function clearUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(2);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \Opal\JdbcDataSourceDto
     */
    public function setUrl( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <driverClass> has a value
     *
     * @return boolean
     */
    public function hasDriverClass(){
      return $this->_has(3);
    }
    
    /**
     * Clear <driverClass> value
     *
     * @return \Opal\JdbcDataSourceDto
     */
    public function clearDriverClass(){
      return $this->_clear(3);
    }
    
    /**
     * Get <driverClass> value
     *
     * @return string
     */
    public function getDriverClass(){
      return $this->_get(3);
    }
    
    /**
     * Set <driverClass> value
     *
     * @param string $value
     * @return \Opal\JdbcDataSourceDto
     */
    public function setDriverClass( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(4);
    }
    
    /**
     * Clear <username> value
     *
     * @return \Opal\JdbcDataSourceDto
     */
    public function clearUsername(){
      return $this->_clear(4);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(4);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \Opal\JdbcDataSourceDto
     */
    public function setUsername( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <password> has a value
     *
     * @return boolean
     */
    public function hasPassword(){
      return $this->_has(5);
    }
    
    /**
     * Clear <password> value
     *
     * @return \Opal\JdbcDataSourceDto
     */
    public function clearPassword(){
      return $this->_clear(5);
    }
    
    /**
     * Get <password> value
     *
     * @return string
     */
    public function getPassword(){
      return $this->_get(5);
    }
    
    /**
     * Set <password> value
     *
     * @param string $value
     * @return \Opal\JdbcDataSourceDto
     */
    public function setPassword( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <editable> has a value
     *
     * @return boolean
     */
    public function hasEditable(){
      return $this->_has(6);
    }
    
    /**
     * Clear <editable> value
     *
     * @return \Opal\JdbcDataSourceDto
     */
    public function clearEditable(){
      return $this->_clear(6);
    }
    
    /**
     * Get <editable> value
     *
     * @return boolean
     */
    public function getEditable(){
      return $this->_get(6);
    }
    
    /**
     * Set <editable> value
     *
     * @param boolean $value
     * @return \Opal\JdbcDataSourceDto
     */
    public function setEditable( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <properties> has a value
     *
     * @return boolean
     */
    public function hasProperties(){
      return $this->_has(7);
    }
    
    /**
     * Clear <properties> value
     *
     * @return \Opal\JdbcDataSourceDto
     */
    public function clearProperties(){
      return $this->_clear(7);
    }
    
    /**
     * Get <properties> value
     *
     * @return string
     */
    public function getProperties(){
      return $this->_get(7);
    }
    
    /**
     * Set <properties> value
     *
     * @param string $value
     * @return \Opal\JdbcDataSourceDto
     */
    public function setProperties( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace Opal {

  class ReportTemplateDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $design = null;
    
    /**  @var string */
    public $format = null;
    
    /**  @var \Opal\ParameterDto[]  */
    public $parameters = array();
    
    /**  @var string */
    public $cron = null;
    
    /**  @var string[]  */
    public $emailNotification = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ReportTemplateDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING design = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "design";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING format = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "format";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE parameters = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "parameters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\ParameterDto';
      $descriptor->addField($f);

      // OPTIONAL STRING cron = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cron";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING emailNotification = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "emailNotification";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <design> has a value
     *
     * @return boolean
     */
    public function hasDesign(){
      return $this->_has(2);
    }
    
    /**
     * Clear <design> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearDesign(){
      return $this->_clear(2);
    }
    
    /**
     * Get <design> value
     *
     * @return string
     */
    public function getDesign(){
      return $this->_get(2);
    }
    
    /**
     * Set <design> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setDesign( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <format> has a value
     *
     * @return boolean
     */
    public function hasFormat(){
      return $this->_has(3);
    }
    
    /**
     * Clear <format> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearFormat(){
      return $this->_clear(3);
    }
    
    /**
     * Get <format> value
     *
     * @return string
     */
    public function getFormat(){
      return $this->_get(3);
    }
    
    /**
     * Set <format> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setFormat( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <parameters> has a value
     *
     * @return boolean
     */
    public function hasParameters(){
      return $this->_has(4);
    }
    
    /**
     * Clear <parameters> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearParameters(){
      return $this->_clear(4);
    }
    
    /**
     * Get <parameters> value
     *
     * @param int $idx
     * @return \Opal\ParameterDto
     */
    public function getParameters($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <parameters> value
     *
     * @param \Opal\ParameterDto $value
     * @return \Opal\ReportTemplateDto
     */
    public function setParameters(\Opal\ParameterDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <parameters>
     *
     * @return \Opal\ParameterDto[]
     */
    public function getParametersList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <parameters>
     *
     * @param \Opal\ParameterDto $value
     * @return \Opal\ReportTemplateDto
     */
    public function addParameters(\Opal\ParameterDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <cron> has a value
     *
     * @return boolean
     */
    public function hasCron(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cron> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearCron(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cron> value
     *
     * @return string
     */
    public function getCron(){
      return $this->_get(5);
    }
    
    /**
     * Set <cron> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setCron( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <emailNotification> has a value
     *
     * @return boolean
     */
    public function hasEmailNotification(){
      return $this->_has(6);
    }
    
    /**
     * Clear <emailNotification> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearEmailNotification(){
      return $this->_clear(6);
    }
    
    /**
     * Get <emailNotification> value
     *
     * @param int $idx
     * @return string
     */
    public function getEmailNotification($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <emailNotification> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setEmailNotification( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <emailNotification>
     *
     * @return string[]
     */
    public function getEmailNotificationList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <emailNotification>
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function addEmailNotification( $value){
     return $this->_add(6, $value);
    }
  }
}

namespace Opal {

  class ReportDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var string */
    public $publicLink = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var int */
    public $lastModifiedTime = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ReportDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING link = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING publicLink = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "publicLink";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 lastModifiedTime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "lastModifiedTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Opal\ReportDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\ReportDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(2);
    }
    
    /**
     * Clear <link> value
     *
     * @return \Opal\ReportDto
     */
    public function clearLink(){
      return $this->_clear(2);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(2);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Opal\ReportDto
     */
    public function setLink( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <publicLink> has a value
     *
     * @return boolean
     */
    public function hasPublicLink(){
      return $this->_has(3);
    }
    
    /**
     * Clear <publicLink> value
     *
     * @return \Opal\ReportDto
     */
    public function clearPublicLink(){
      return $this->_clear(3);
    }
    
    /**
     * Get <publicLink> value
     *
     * @return string
     */
    public function getPublicLink(){
      return $this->_get(3);
    }
    
    /**
     * Set <publicLink> value
     *
     * @param string $value
     * @return \Opal\ReportDto
     */
    public function setPublicLink( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <size> value
     *
     * @return \Opal\ReportDto
     */
    public function clearSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \Opal\ReportDto
     */
    public function setSize( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <lastModifiedTime> has a value
     *
     * @return boolean
     */
    public function hasLastModifiedTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <lastModifiedTime> value
     *
     * @return \Opal\ReportDto
     */
    public function clearLastModifiedTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <lastModifiedTime> value
     *
     * @return int
     */
    public function getLastModifiedTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <lastModifiedTime> value
     *
     * @param int $value
     * @return \Opal\ReportDto
     */
    public function setLastModifiedTime( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace Opal {

  class ParameterDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ParameterDto');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Opal\ParameterDto
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Opal\ParameterDto
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Opal\ParameterDto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Opal\ParameterDto
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Opal\Subject {

  class SubjectType extends \DrSlump\Protobuf\Enum {
    const USER = 0;
    const GROUP = 1;
  }
}
namespace Opal {

  class Subject extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $principal = null;
    
    /**  @var int - \Opal\Subject\SubjectType */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.Subject');

      // REQUIRED STRING principal = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "principal";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\Subject\SubjectType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <principal> has a value
     *
     * @return boolean
     */
    public function hasPrincipal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <principal> value
     *
     * @return \Opal\Subject
     */
    public function clearPrincipal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <principal> value
     *
     * @return string
     */
    public function getPrincipal(){
      return $this->_get(1);
    }
    
    /**
     * Set <principal> value
     *
     * @param string $value
     * @return \Opal\Subject
     */
    public function setPrincipal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \Opal\Subject
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \Opal\Subject\SubjectType
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \Opal\Subject\SubjectType $value
     * @return \Opal\Subject
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Opal {

  class Acl extends \DrSlump\Protobuf\Message {

    /**  @var \Opal\Subject */
    public $subject = null;
    
    /**  @var string */
    public $resource = null;
    
    /**  @var string[]  */
    public $actions = array();
    
    /**  @var string */
    public $domain = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.Acl');

      // REQUIRED MESSAGE subject = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "subject";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\Subject';
      $descriptor->addField($f);

      // REQUIRED STRING resource = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "resource";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING actions = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "actions";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED STRING domain = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "domain";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <subject> has a value
     *
     * @return boolean
     */
    public function hasSubject(){
      return $this->_has(1);
    }
    
    /**
     * Clear <subject> value
     *
     * @return \Opal\Acl
     */
    public function clearSubject(){
      return $this->_clear(1);
    }
    
    /**
     * Get <subject> value
     *
     * @return \Opal\Subject
     */
    public function getSubject(){
      return $this->_get(1);
    }
    
    /**
     * Set <subject> value
     *
     * @param \Opal\Subject $value
     * @return \Opal\Acl
     */
    public function setSubject(\Opal\Subject $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <resource> has a value
     *
     * @return boolean
     */
    public function hasResource(){
      return $this->_has(2);
    }
    
    /**
     * Clear <resource> value
     *
     * @return \Opal\Acl
     */
    public function clearResource(){
      return $this->_clear(2);
    }
    
    /**
     * Get <resource> value
     *
     * @return string
     */
    public function getResource(){
      return $this->_get(2);
    }
    
    /**
     * Set <resource> value
     *
     * @param string $value
     * @return \Opal\Acl
     */
    public function setResource( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <actions> has a value
     *
     * @return boolean
     */
    public function hasActions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <actions> value
     *
     * @return \Opal\Acl
     */
    public function clearActions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <actions> value
     *
     * @param int $idx
     * @return string
     */
    public function getActions($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <actions> value
     *
     * @param string $value
     * @return \Opal\Acl
     */
    public function setActions( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <actions>
     *
     * @return string[]
     */
    public function getActionsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <actions>
     *
     * @param string $value
     * @return \Opal\Acl
     */
    public function addActions( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <domain> has a value
     *
     * @return boolean
     */
    public function hasDomain(){
      return $this->_has(4);
    }
    
    /**
     * Clear <domain> value
     *
     * @return \Opal\Acl
     */
    public function clearDomain(){
      return $this->_clear(4);
    }
    
    /**
     * Get <domain> value
     *
     * @return string
     */
    public function getDomain(){
      return $this->_get(4);
    }
    
    /**
     * Set <domain> value
     *
     * @param string $value
     * @return \Opal\Acl
     */
    public function setDomain( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace Opal {

  class Acls extends \DrSlump\Protobuf\Message {

    /**  @var \Opal\Subject */
    public $subject = null;
    
    /**  @var \Opal\Acl[]  */
    public $acls = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.Acls');

      // REQUIRED MESSAGE subject = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "subject";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\Subject';
      $descriptor->addField($f);

      // REPEATED MESSAGE acls = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "acls";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\Acl';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <subject> has a value
     *
     * @return boolean
     */
    public function hasSubject(){
      return $this->_has(1);
    }
    
    /**
     * Clear <subject> value
     *
     * @return \Opal\Acls
     */
    public function clearSubject(){
      return $this->_clear(1);
    }
    
    /**
     * Get <subject> value
     *
     * @return \Opal\Subject
     */
    public function getSubject(){
      return $this->_get(1);
    }
    
    /**
     * Set <subject> value
     *
     * @param \Opal\Subject $value
     * @return \Opal\Acls
     */
    public function setSubject(\Opal\Subject $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <acls> has a value
     *
     * @return boolean
     */
    public function hasAcls(){
      return $this->_has(2);
    }
    
    /**
     * Clear <acls> value
     *
     * @return \Opal\Acls
     */
    public function clearAcls(){
      return $this->_clear(2);
    }
    
    /**
     * Get <acls> value
     *
     * @param int $idx
     * @return \Opal\Acl
     */
    public function getAcls($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <acls> value
     *
     * @param \Opal\Acl $value
     * @return \Opal\Acls
     */
    public function setAcls(\Opal\Acl $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <acls>
     *
     * @return \Opal\Acl[]
     */
    public function getAclsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <acls>
     *
     * @param \Opal\Acl $value
     * @return \Opal\Acls
     */
    public function addAcls(\Opal\Acl $value){
     return $this->_add(2, $value);
    }
  }
}

namespace Opal {

  class OpalMap extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $keys = array();
    
    /**  @var string[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.OpalMap');

      // REPEATED STRING keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING values = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \Opal\OpalMap
     */
    public function clearKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return string
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param string $value
     * @return \Opal\OpalMap
     */
    public function setKeys( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return string[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param string $value
     * @return \Opal\OpalMap
     */
    public function addKeys( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(2);
    }
    
    /**
     * Clear <values> value
     *
     * @return \Opal\OpalMap
     */
    public function clearValues(){
      return $this->_clear(2);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return string
     */
    public function getValues($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param string $value
     * @return \Opal\OpalMap
     */
    public function setValues( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return string[]
     */
    public function getValuesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param string $value
     * @return \Opal\OpalMap
     */
    public function addValues( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace Opal {

  class EntryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.EntryDto');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Opal\EntryDto
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Opal\EntryDto
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Opal\EntryDto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Opal\EntryDto
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Opal {

  class ServiceDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \Opal\ServiceStatus */
    public $status = null;
    
    /**  @var string */
    public $link = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ServiceDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\ServiceStatus';
      $descriptor->addField($f);

      // REQUIRED STRING link = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Opal\ServiceDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\ServiceDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \Opal\ServiceDto
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \Opal\ServiceStatus
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \Opal\ServiceStatus $value
     * @return \Opal\ServiceDto
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(3);
    }
    
    /**
     * Clear <link> value
     *
     * @return \Opal\ServiceDto
     */
    public function clearLink(){
      return $this->_clear(3);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(3);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Opal\ServiceDto
     */
    public function setLink( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Opal {

  class ServiceCfgDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ServiceCfgDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Opal\ServiceCfgDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\ServiceCfgDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace Opal {

  class ESCfgDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $clusterName = null;
    
    /**  @var string */
    public $indexName = null;
    
    /**  @var boolean */
    public $dataNode = true;
    
    /**  @var int */
    public $shards = null;
    
    /**  @var int */
    public $replicas = null;
    
    /**  @var string */
    public $settings = null;
    
    /**  @var boolean */
    public $enabled = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ESCfgDto');

      // REQUIRED STRING clusterName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "clusterName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING indexName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "indexName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED BOOL dataNode = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "dataNode";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = true;
      $descriptor->addField($f);

      // REQUIRED INT32 shards = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "shards";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 replicas = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "replicas";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING settings = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "settings";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL enabled = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "enabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <clusterName> has a value
     *
     * @return boolean
     */
    public function hasClusterName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <clusterName> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearClusterName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <clusterName> value
     *
     * @return string
     */
    public function getClusterName(){
      return $this->_get(1);
    }
    
    /**
     * Set <clusterName> value
     *
     * @param string $value
     * @return \Opal\ESCfgDto
     */
    public function setClusterName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <indexName> has a value
     *
     * @return boolean
     */
    public function hasIndexName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <indexName> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearIndexName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <indexName> value
     *
     * @return string
     */
    public function getIndexName(){
      return $this->_get(2);
    }
    
    /**
     * Set <indexName> value
     *
     * @param string $value
     * @return \Opal\ESCfgDto
     */
    public function setIndexName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <dataNode> has a value
     *
     * @return boolean
     */
    public function hasDataNode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <dataNode> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearDataNode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <dataNode> value
     *
     * @return boolean
     */
    public function getDataNode(){
      return $this->_get(3);
    }
    
    /**
     * Set <dataNode> value
     *
     * @param boolean $value
     * @return \Opal\ESCfgDto
     */
    public function setDataNode( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <shards> has a value
     *
     * @return boolean
     */
    public function hasShards(){
      return $this->_has(4);
    }
    
    /**
     * Clear <shards> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearShards(){
      return $this->_clear(4);
    }
    
    /**
     * Get <shards> value
     *
     * @return int
     */
    public function getShards(){
      return $this->_get(4);
    }
    
    /**
     * Set <shards> value
     *
     * @param int $value
     * @return \Opal\ESCfgDto
     */
    public function setShards( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <replicas> has a value
     *
     * @return boolean
     */
    public function hasReplicas(){
      return $this->_has(5);
    }
    
    /**
     * Clear <replicas> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearReplicas(){
      return $this->_clear(5);
    }
    
    /**
     * Get <replicas> value
     *
     * @return int
     */
    public function getReplicas(){
      return $this->_get(5);
    }
    
    /**
     * Set <replicas> value
     *
     * @param int $value
     * @return \Opal\ESCfgDto
     */
    public function setReplicas( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <settings> has a value
     *
     * @return boolean
     */
    public function hasSettings(){
      return $this->_has(6);
    }
    
    /**
     * Clear <settings> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearSettings(){
      return $this->_clear(6);
    }
    
    /**
     * Get <settings> value
     *
     * @return string
     */
    public function getSettings(){
      return $this->_get(6);
    }
    
    /**
     * Set <settings> value
     *
     * @param string $value
     * @return \Opal\ESCfgDto
     */
    public function setSettings( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <enabled> has a value
     *
     * @return boolean
     */
    public function hasEnabled(){
      return $this->_has(7);
    }
    
    /**
     * Clear <enabled> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearEnabled(){
      return $this->_clear(7);
    }
    
    /**
     * Get <enabled> value
     *
     * @return boolean
     */
    public function getEnabled(){
      return $this->_get(7);
    }
    
    /**
     * Set <enabled> value
     *
     * @param boolean $value
     * @return \Opal\ESCfgDto
     */
    public function setEnabled( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace Opal {

  class TableIndexStatusDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $datasource = null;
    
    /**  @var string */
    public $table = null;
    
    /**  @var string */
    public $indexCreated = null;
    
    /**  @var string */
    public $indexLastUpdate = null;
    
    /**  @var string */
    public $tableLastUpdate = null;
    
    /**  @var \Opal\ScheduleDto */
    public $schedule = null;
    
    /**  @var int - \Opal\TableIndexationStatus */
    public $status = null;
    
    /**  @var float */
    public $progress = null;
    
    /**  @var string */
    public $link = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.TableIndexStatusDto');

      // REQUIRED STRING datasource = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "datasource";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING table = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING indexCreated = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "indexCreated";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING indexLastUpdate = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "indexLastUpdate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING tableLastUpdate = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "tableLastUpdate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED MESSAGE schedule = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "schedule";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\ScheduleDto';
      $descriptor->addField($f);

      // REQUIRED ENUM status = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\TableIndexationStatus';
      $descriptor->addField($f);

      // OPTIONAL FLOAT progress = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "progress";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING link = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <datasource> has a value
     *
     * @return boolean
     */
    public function hasDatasource(){
      return $this->_has(1);
    }
    
    /**
     * Clear <datasource> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearDatasource(){
      return $this->_clear(1);
    }
    
    /**
     * Get <datasource> value
     *
     * @return string
     */
    public function getDatasource(){
      return $this->_get(1);
    }
    
    /**
     * Set <datasource> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setDatasource( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable(){
      return $this->_has(2);
    }
    
    /**
     * Clear <table> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearTable(){
      return $this->_clear(2);
    }
    
    /**
     * Get <table> value
     *
     * @return string
     */
    public function getTable(){
      return $this->_get(2);
    }
    
    /**
     * Set <table> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setTable( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <indexCreated> has a value
     *
     * @return boolean
     */
    public function hasIndexCreated(){
      return $this->_has(3);
    }
    
    /**
     * Clear <indexCreated> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearIndexCreated(){
      return $this->_clear(3);
    }
    
    /**
     * Get <indexCreated> value
     *
     * @return string
     */
    public function getIndexCreated(){
      return $this->_get(3);
    }
    
    /**
     * Set <indexCreated> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setIndexCreated( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <indexLastUpdate> has a value
     *
     * @return boolean
     */
    public function hasIndexLastUpdate(){
      return $this->_has(4);
    }
    
    /**
     * Clear <indexLastUpdate> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearIndexLastUpdate(){
      return $this->_clear(4);
    }
    
    /**
     * Get <indexLastUpdate> value
     *
     * @return string
     */
    public function getIndexLastUpdate(){
      return $this->_get(4);
    }
    
    /**
     * Set <indexLastUpdate> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setIndexLastUpdate( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <tableLastUpdate> has a value
     *
     * @return boolean
     */
    public function hasTableLastUpdate(){
      return $this->_has(5);
    }
    
    /**
     * Clear <tableLastUpdate> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearTableLastUpdate(){
      return $this->_clear(5);
    }
    
    /**
     * Get <tableLastUpdate> value
     *
     * @return string
     */
    public function getTableLastUpdate(){
      return $this->_get(5);
    }
    
    /**
     * Set <tableLastUpdate> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setTableLastUpdate( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <schedule> has a value
     *
     * @return boolean
     */
    public function hasSchedule(){
      return $this->_has(6);
    }
    
    /**
     * Clear <schedule> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearSchedule(){
      return $this->_clear(6);
    }
    
    /**
     * Get <schedule> value
     *
     * @return \Opal\ScheduleDto
     */
    public function getSchedule(){
      return $this->_get(6);
    }
    
    /**
     * Set <schedule> value
     *
     * @param \Opal\ScheduleDto $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setSchedule(\Opal\ScheduleDto $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(7);
    }
    
    /**
     * Clear <status> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearStatus(){
      return $this->_clear(7);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \Opal\TableIndexationStatus
     */
    public function getStatus(){
      return $this->_get(7);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \Opal\TableIndexationStatus $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setStatus( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <progress> has a value
     *
     * @return boolean
     */
    public function hasProgress(){
      return $this->_has(8);
    }
    
    /**
     * Clear <progress> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearProgress(){
      return $this->_clear(8);
    }
    
    /**
     * Get <progress> value
     *
     * @return float
     */
    public function getProgress(){
      return $this->_get(8);
    }
    
    /**
     * Set <progress> value
     *
     * @param float $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setProgress( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(9);
    }
    
    /**
     * Clear <link> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearLink(){
      return $this->_clear(9);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(9);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setLink( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace Opal {

  class ScheduleDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \Opal\ScheduleType */
    public $type = null;
    
    /**  @var int - \Opal\Day */
    public $day = null;
    
    /**  @var int */
    public $hours = null;
    
    /**  @var int */
    public $minutes = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ScheduleDto');

      // REQUIRED ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\ScheduleType';
      $descriptor->addField($f);

      // OPTIONAL ENUM day = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "day";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Opal\Day';
      $descriptor->addField($f);

      // OPTIONAL INT32 hours = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "hours";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 minutes = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "minutes";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \Opal\ScheduleDto
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \Opal\ScheduleType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \Opal\ScheduleType $value
     * @return \Opal\ScheduleDto
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <day> has a value
     *
     * @return boolean
     */
    public function hasDay(){
      return $this->_has(2);
    }
    
    /**
     * Clear <day> value
     *
     * @return \Opal\ScheduleDto
     */
    public function clearDay(){
      return $this->_clear(2);
    }
    
    /**
     * Get <day> value
     *
     * @return int - \Opal\Day
     */
    public function getDay(){
      return $this->_get(2);
    }
    
    /**
     * Set <day> value
     *
     * @param int - \Opal\Day $value
     * @return \Opal\ScheduleDto
     */
    public function setDay( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <hours> has a value
     *
     * @return boolean
     */
    public function hasHours(){
      return $this->_has(3);
    }
    
    /**
     * Clear <hours> value
     *
     * @return \Opal\ScheduleDto
     */
    public function clearHours(){
      return $this->_clear(3);
    }
    
    /**
     * Get <hours> value
     *
     * @return int
     */
    public function getHours(){
      return $this->_get(3);
    }
    
    /**
     * Set <hours> value
     *
     * @param int $value
     * @return \Opal\ScheduleDto
     */
    public function setHours( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <minutes> has a value
     *
     * @return boolean
     */
    public function hasMinutes(){
      return $this->_has(4);
    }
    
    /**
     * Clear <minutes> value
     *
     * @return \Opal\ScheduleDto
     */
    public function clearMinutes(){
      return $this->_clear(4);
    }
    
    /**
     * Get <minutes> value
     *
     * @return int
     */
    public function getMinutes(){
      return $this->_get(4);
    }
    
    /**
     * Set <minutes> value
     *
     * @param int $value
     * @return \Opal\ScheduleDto
     */
    public function setMinutes( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace {
  \Opal\ServiceCfgDto::extension(function(){
      // OPTIONAL MESSAGE Opal.ESCfgDto.params = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "Opal.ESCfgDto.params";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Opal\ESCfgDto';
    return $f;
  });
}